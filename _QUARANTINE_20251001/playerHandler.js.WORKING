// playerHandler.js - WebSocket handler for player connections
module.exports = (io, socket, app) => {
  console.log(`Player connected: ${socket.id}`);

  // Handle player joining
  socket.on('player:join_room', async (data) => {
    const { sessionId, clientId } = data;

    if (!sessionId || !clientId) {
      socket.emit('error', { message: 'Missing sessionId or clientId' });
      return;
    }

    // Verify session exists using the existing db connection
    const db = app.locals.db;
    try {
      const session = await db('sessions')
        .where({ id: sessionId, is_active: true })
        .first();

      if (!session) {
        socket.emit('error', { message: 'Invalid session' });
        return;
      }
    } catch (error) {
      console.error('Session check error:', error);
      socket.emit('error', { message: 'Session verification failed' });
      return;
    }

    // Join the room
    socket.join(sessionId); // join game room
    socket.join(clientId); // 
    socket.clientId = clientId; // 
    socket.sessionId = sessionId;
    socket.role = 'player';

    // Notify others
    socket.to(sessionId).emit('PLAYER_JOINED', {
      playerId: clientId,
      playerCount: io.sockets.adapter.rooms.get(sessionId)?.size || 0
    });

    // Add player to GameManager
    const gameManager = app.locals.gameManager;
    if (gameManager) {
      const nickname = data.nickname || `Player ${io.sockets.adapter.rooms.get(sessionId)?.size || 1}`;
      gameManager.addPlayer(sessionId, clientId, nickname);
      console.log(`Added player ${clientId} to GameManager with nickname: ${nickname}`);
    } else {
      console.error('GameManager not found in app.locals');
    }

    console.log(`Player ${clientId} joined session ${sessionId}`);
  });

  // Handle any player starting the game
  socket.on('START_GAME', async (data) => {
    const { sessionId, clientId } = data;

    if (!sessionId || !clientId) {
      socket.emit('error', { message: 'Missing required data' });
      return;
    }

    // Any player can start, but verify they're in the session
    const db = app.locals.db;
    const playerCheck = await db('players')
      .where({ session_id: sessionId, client_id: clientId })
      .first();

    if (!playerCheck) {
      socket.emit('error', { message: 'You must join the session first' });
      return;
    }

    // Update session to started
    await db('sessions')
      .where({ id: sessionId })
      .update({
        status: 'playing',
        started_at: new Date()
      });

    console.log(`Game starting for session ${sessionId}`);

    // Emit game starting event
    io.to(sessionId).emit('GAME_STARTING', {
      message: 'Game is starting!',
      startedBy: clientId
    });

    // Start the game immediately via GameManager
    // GameManager will handle its own countdown
    const gameManager = app.locals.gameManager;
    if (gameManager) {
      console.log(`Starting game via GameManager for session ${sessionId}`);
      gameManager.startGame(sessionId);
    } else {
      console.error("GameManager not found!");
      io.to(sessionId).emit("error", { message: "Game system error" });
    }
  });

  // Handle answer submission
  socket.on('SUBMIT_ANSWER', async (data) => {
    const { questionId, answerIndex, responseTimeMs } = data;
    const { sessionId, clientId } = socket;

    if (!sessionId || !clientId) {
      socket.emit('error', { message: 'Not properly connected' });
      return;
    }

    const gameManager = app.locals.gameManager;
    if (gameManager) {
      const result = await gameManager.submitAnswer(sessionId, clientId, {
        questionId,
        answerIndex,
        responseTimeMs
      });

      if (result) {
        socket.emit('ANSWER_RESULT', result);
      }
    }
  });

  // Handle disconnection
  socket.on('disconnect', () => {
    const { sessionId, clientId } = socket;

    if (sessionId && clientId) {
      socket.to(sessionId).emit('PLAYER_LEFT', {
        playerId: clientId,
        playerCount: io.sockets.adapter.rooms.get(sessionId)?.size || 0
      });
    }

    console.log(`Player disconnected: ${socket.id}`);
  });

  // Handle errors
  socket.on('error', (error) => {
    console.error(`Player socket error: ${error.message}`);
  });
};

