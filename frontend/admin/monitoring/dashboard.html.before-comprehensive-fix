<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RSN8TV Trivia Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #0a0e1a;
            --bg-secondary: #141927;
            --glass-bg: rgba(255, 255, 255, 0.03);
            --glass-border: rgba(255, 255, 255, 0.08);
            --glass-hover: rgba(255, 255, 255, 0.06);
            --text-primary: #ffffff;
            --text-secondary: #8b92a9;
            --accent-cyan: #00d4ff;
            --accent-green: #00ff88;
            --accent-purple: #a78bfa;
            --accent-yellow: #fbbf24;
            --accent-red: #ef4444;
            --accent-orange: #fb923c;
            --shadow-glow: 0 0 20px rgba(0, 212, 255, 0.2);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0a0e1a 0%, #1a1f2e 50%, #0a0e1a 100%);
            color: var(--text-primary);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        /* Animated background */
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 50%, rgba(0, 212, 255, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 80%, rgba(167, 139, 250, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 40% 20%, rgba(0, 255, 136, 0.1) 0%, transparent 50%);
            pointer-events: none;
            z-index: 1;
            animation: backgroundShift 20s ease-in-out infinite;
        }

        @keyframes backgroundShift {
            0%, 100% { transform: translate(0, 0); }
            50% { transform: translate(-20px, 10px); }
        }

        /* Login Screen */
        .login-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(10, 14, 26, 0.95);
            backdrop-filter: blur(10px);
            z-index: 10000;
        }

        .login-container.hidden {
            display: none;
        }

        .login-box {
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            padding: 40px;
            width: 400px;
            max-width: 90%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        }

        .login-title {
            font-size: 28px;
            font-weight: 700;
            text-align: center;
            margin-bottom: 30px;
            background: linear-gradient(135deg, var(--accent-cyan), var(--accent-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .login-error {
            color: var(--accent-red);
            font-size: 14px;
            margin-bottom: 20px;
            text-align: center;
            display: none;
        }

        .dashboard-container {
            position: relative;
            z-index: 2;
            display: flex;
            height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 260px;
            background: var(--glass-bg);
            backdrop-filter: blur(20px);
            border-right: 1px solid var(--glass-border);
            padding: 24px 16px;
            overflow-y: auto;
            transition: all 0.3s ease;
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 32px;
            padding: 12px;
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.1), rgba(167, 139, 250, 0.1));
            border-radius: 12px;
            border: 1px solid var(--glass-border);
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--accent-cyan), var(--accent-purple));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 18px;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .logo-text {
            font-size: 20px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--accent-cyan), var(--accent-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .user-info {
            margin-bottom: 24px;
            padding: 12px;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 10px;
            font-size: 12px;
            color: var(--text-secondary);
        }

        .nav-section {
            margin-bottom: 24px;
        }

        .nav-section-title {
            font-size: 11px;
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 8px;
            padding: 0 12px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            margin-bottom: 4px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .nav-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(0, 212, 255, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .nav-item:hover {
            background: var(--glass-hover);
            transform: translateX(4px);
        }

        .nav-item:hover::before {
            left: 100%;
        }

        .nav-item.active {
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.15), rgba(167, 139, 250, 0.15));
            border: 1px solid rgba(0, 212, 255, 0.3);
            box-shadow: var(--shadow-glow);
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
        }

        .nav-item.active .nav-icon {
            color: var(--accent-cyan);
        }

        .nav-text {
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
        }

        .nav-item.active .nav-text {
            color: var(--text-primary);
        }

        .logout-btn {
            width: 100%;
            margin-top: 20px;
            padding: 12px;
            background: rgba(239, 68, 68, 0.1);
            border: 1px solid rgba(239, 68, 68, 0.3);
            border-radius: 10px;
            color: var(--accent-red);
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }
            background: rgba(239, 68, 68, 0.2);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 24px;
            overflow-y: auto;
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            padding: 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
        }

        .content-title {
            font-size: 28px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--text-primary), var(--text-secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid var(--glass-border);
            background: var(--glass-bg);
            color: var(--text-primary);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent-cyan), var(--accent-purple));
            border: none;
        }

        .btn:hover {
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 212, 255, 0.3);
        }

        /* Tab Content Sections */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 24px;
        }

        .stat-card {
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
            padding: 20px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--accent-cyan), var(--accent-purple));
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px rgba(0, 212, 255, 0.2);
        }

        .stat-label {
            font-size: 12px;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 8px;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 700;
            background: linear-gradient(135deg, var(--accent-cyan), var(--accent-purple));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 8px;
        }

        .stat-change {
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .stat-change.positive {
            color: var(--accent-green);
        }

        .stat-change.negative {
            color: var(--accent-red);
        }

        /* Data Table */
        .data-table-container {
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 24px;
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .search-box {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 10px 16px;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 10px;
            width: 300px;
        }

        .search-box input {
            flex: 1;
            background: transparent;
            border: none;
            color: var(--text-primary);
            font-size: 14px;
            outline: none;
        }

        .search-box input::placeholder {
            color: var(--text-secondary);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th {
            text-align: left;
            padding: 12px;
            font-size: 12px;
            font-weight: 600;
            color: var(--text-secondary);
            text-transform: uppercase;
            letter-spacing: 1px;
            border-bottom: 1px solid var(--glass-border);
        }

        .data-table td {
            padding: 16px 12px;
            font-size: 14px;
            color: var(--text-primary);
            border-bottom: 1px solid rgba(255, 255, 255, 0.03);
        }

        .data-table tr:hover {
            background: var(--glass-hover);
        }

        /* Loading Spinner */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--glass-border);
            border-top: 3px solid var(--accent-cyan);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Forms */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
            margin-bottom: 8px;
        }

        .form-input, .form-select {
            width: 100%;
            padding: 12px 16px;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 10px;
            color: var(--text-primary);
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-input:focus, .form-select:focus {
            outline: none;
            border-color: var(--accent-cyan);
            box-shadow: 0 0 0 3px rgba(0, 212, 255, 0.1);
        }

        .form-select option {
            background: var(--bg-secondary);
            color: var(--text-primary);
        }

        /* Chart Container */
        .chart-container {
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
            padding: 20px;
            margin-bottom: 24px;
            height: 400px;
            position: relative;
        }

        .chart-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 20px;
            color: var(--text-primary);
        }

        /* Status Badge */
        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-badge.active {
            background: rgba(0, 255, 136, 0.15);
            color: var(--accent-green);
            border: 1px solid rgba(0, 255, 136, 0.3);
        }

        .status-badge.inactive {
            background: rgba(239, 68, 68, 0.15);
            color: var(--accent-red);
            border: 1px solid rgba(239, 68, 68, 0.3);
        }

        .status-badge.pending {
            background: rgba(251, 191, 36, 0.15);
            color: var(--accent-yellow);
            border: 1px solid rgba(251, 191, 36, 0.3);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--bg-secondary);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            padding: 32px;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .modal-title {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-primary);
        }

        .modal-close {
            width: 32px;
            height: 32px;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .modal-close:hover {
            background: var(--glass-hover);
            transform: rotate(90deg);
        }

        .modal-footer {
            margin-top: 24px;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 16px 20px;
            background: var(--glass-bg);
            backdrop-filter: blur(10px);
            border: 1px solid var(--glass-border);
            border-radius: 10px;
            color: var(--text-primary);
            z-index: 10000;
            animation: slideIn 0.3s ease;
            display: none;
        }

        .toast.show {
            display: block;
        }

        .toast.success {
            border-color: var(--accent-green);
            background: rgba(0, 255, 136, 0.1);
        }

        .toast.error {
            border-color: var(--accent-red);
            background: rgba(239, 68, 68, 0.1);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                position: fixed;
                left: -260px;
                height: 100vh;
                z-index: 100;
            }

            .sidebar.open {
                left: 0;
            }

            .main-content {
                padding: 16px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="login-container" class="login-container">
        <div class="login-box">
            <h2 class="login-title">RSN8TV Admin Login</h2>
            <div id="login-error" class="login-error"></div>
            <form id="login-form">
                <div class="form-group">
                    <label class="form-label">Username</label>
                    <input type="text" id="login-username" class="form-input" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Password</label>
                    <input type="password" id="login-password" class="form-input" required>
                </div>
                <button type="submit" class="btn btn-primary" style="width: 100%;">Login</button>
            </form>
        </div>
    </div>

    <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <div class="logo-icon">R8</div>
                <div class="logo-text">RSN8TV Trivia</div>
            </div>

            <div class="user-info">
                Logged in as: <strong id="current-user">Admin</strong>
            </div>

            <nav class="sidebar-nav">
                <!-- Main Navigation -->
                <div class="nav-section">
                    <div class="nav-section-title">Main</div>
                    <div class="nav-item active" data-tab="dashboard">
                        <span class="nav-icon">📊</span>
                        <span class="nav-text">Dashboard</span>
                    </div>
                    <div class="nav-item" data-tab="sessions">
                        <span class="nav-icon">🎮</span>
                        <span class="nav-text">Active Sessions</span>
                    </div>
                    <div class="nav-item" data-tab="players">
                        <span class="nav-icon">👥</span>
                        <span class="nav-text">Players</span>
                    </div>
                    <div class="nav-item" data-tab="leaderboards">
                        <span class="nav-icon">🏆</span>
                        <span class="nav-text">Leaderboards</span>
                    </div>
                </div>

                <!-- Content Management -->
                <div class="nav-section">
                    <div class="nav-section-title">Content</div>
                    <div class="nav-item" data-tab="questions">
                        <span class="nav-icon">❓</span>
                        <span class="nav-text">Questions</span>
                    </div>
                    <div class="nav-item" data-tab="categories">
                        <span class="nav-icon">📁</span>
                        <span class="nav-text">Categories</span>
                    </div>
                    <div class="nav-item" data-tab="themes">
                        <span class="nav-icon">🎨</span>
                        <span class="nav-text">Themes</span>
                    </div>
                    <div class="nav-item" data-tab="branding">
                        <span class="nav-icon">🏢</span>
                        <span class="nav-text">Branding</span>
                    </div>
                </div>

                <!-- Rewards & Engagement -->
                <div class="nav-section">
                    <div class="nav-section-title">Rewards</div>
                    <div class="nav-item" data-tab="prizes">
                        <span class="nav-icon">🎁</span>
                        <span class="nav-text">Prizes</span>
                    </div>
                    <div class="nav-item" data-tab="campaigns">
                        <span class="nav-icon">📧</span>
                        <span class="nav-text">Email Campaigns</span>
                    </div>
                </div>

                <!-- System -->
                <div class="nav-section">
                    <div class="nav-section-title">System</div>
                    <div class="nav-item" data-tab="venues">
                        <span class="nav-icon">📍</span>
                        <span class="nav-text">Venues</span>
                    </div>
                    <div class="nav-item" data-tab="exports">
                        <span class="nav-icon">📤</span>
                        <span class="nav-text">Data Exports</span>
                    </div>
                    <div class="nav-item" data-tab="audit">
                        <span class="nav-icon">📝</span>
                        <span class="nav-text">Audit Logs</span>
                    </div>
                    <div class="nav-item" data-tab="settings">
                        <span class="nav-icon">⚙️</span>
                        <span class="nav-text">Settings</span>
                    </div>
                </div>
            </nav>

            <button class="logout-btn" onclick="logout()">🚪 Logout</button>
        </aside>

        <!-- Main Content Area -->
        <main class="main-content">
            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <div class="content-header">
                    <h1 class="content-title">Dashboard Overview</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>

                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-label">Active Sessions</div>
                        <div class="stat-value" id="active-sessions">0</div>
                        <div class="stat-change positive">↑ Live Now</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Total Players</div>
                        <div class="stat-value" id="total-players">0</div>
                        <div class="stat-change positive">↑ Registered</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Questions in Bank</div>
                        <div class="stat-value" id="total-questions">0</div>
                        <div class="stat-change positive">↑ Active</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Games Today</div>
                        <div class="stat-value" id="games-today">0</div>
                        <div class="stat-change">Completed</div>
                    </div>
                </div>

                <div class="chart-container">
                    <h3 class="chart-title">Player Activity (Last 7 Days)</h3>
                    <canvas id="activity-chart"></canvas>
                </div>

                <div class="data-table-container">
                    <div class="table-header">
                        <h3>Recent Sessions</h3>
                        <button class="btn" onclick="switchTab('sessions')">View All</button>
                    </div>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Session ID</th>
                                <th>Room Code</th>
                                <th>Players</th>
                                <th>Round</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="recent-sessions-table">
                            <tr>
                                <td colspan="7">Loading sessions...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Sessions Tab -->
            <div id="sessions" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Game Sessions</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>

                <div class="data-table-container">
                    <div class="table-header">
                        <h3>Session Management</h3>
                        <div class="search-box">
                            <span>🔍</span>
                            <input type="text" placeholder="Search by room code..." id="session-search" onkeyup="searchSessions()">
                        </div>
                    </div>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Session ID</th>
                                <th>Room Code</th>
                                <th>Host ID</th>
                                <th>Players</th>
                                <th>Round</th>
                                <th>Questions</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="sessions-table">
                            <tr>
                                <td colspan="9">Loading sessions...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Players Tab -->
            <div id="players" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Player Management</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>

                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-label">Total Registered</div>
                        <div class="stat-value" id="registered-players">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Active Today</div>
                        <div class="stat-value" id="active-today">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">New This Week</div>
                        <div class="stat-value" id="new-this-week">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Marketing Consent</div>
                        <div class="stat-value" id="marketing-consent">0%</div>
                    </div>
                </div>

                <div class="data-table-container">
                    <div class="table-header">
                        <h3>Player Database</h3>
                        <div class="search-box">
                            <span>🔍</span>
                            <input type="text" placeholder="Search players..." id="player-search" onkeyup="searchPlayers()">
                        </div>
                    </div>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nickname</th>
                                <th>Email</th>
                                <th>Games</th>
                                <th>Total Score</th>
                                <th>Last Played</th>
                                <th>Verified</th>
                                <th>Marketing</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="players-table">
                            <tr>
                                <td colspan="9">Loading players...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Leaderboards Tab -->
            <div id="leaderboards" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Leaderboards</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>

                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Player</th>
                                <th>Email</th>
                                <th>Total Score</th>
                                <th>Games Played</th>
                                <th>Average Score</th>
                                <th>Period</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="leaderboard-table">
                            <tr>
                                <td colspan="8">Loading leaderboard...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Questions Tab -->
            <div id="questions" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Question Management</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>

                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-label">Total Questions</div>
                        <div class="stat-value" id="total-questions-stat">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Active</div>
                        <div class="stat-value" id="active-questions">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Flagged</div>
                        <div class="stat-value" id="flagged-questions">0</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-label">Custom</div>
                        <div class="stat-value" id="custom-questions">0</div>
                    </div>
                </div>

                <div class="data-table-container">
                    <div class="table-header">
                        <h3>Question Bank</h3>
                        <div style="display: flex; gap: 12px;">
                            <select class="form-select" style="width: 150px;" id="question-category" onchange="filterQuestions()">
                                <option value="">All Categories</option>
                            </select>
                            <select class="form-select" style="width: 120px;" id="question-difficulty" onchange="filterQuestions()">
                                <option value="">All Levels</option>
                                <option value="easy">Easy</option>
                                <option value="medium">Medium</option>
                                <option value="hard">Hard</option>
                            </select>
                            <div class="search-box">
                                <span>🔍</span>
                                <input type="text" placeholder="Search questions..." id="question-search" onkeyup="searchQuestions()">
                            </div>
                        </div>
                    </div>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Question</th>
                                <th>Category</th>
                                <th>Difficulty</th>
                                <th>Times Used</th>
                                <th>Success Rate</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="questions-table">
                            <tr>
                                <td colspan="8">Loading questions...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Categories Tab -->
            <div id="categories" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Question Categories</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th>Question Count</th>
                                <th>Average Difficulty</th>
                                <th>Success Rate</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="categories-table">
                            <tr>
                                <td colspan="5">Loading categories...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Themes Tab -->
            <div id="themes" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Theme Management</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Theme Name</th>
                                <th>Description</th>
                                <th>Type</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="themes-table">
                            <tr>
                                <td colspan="6">Loading themes...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Branding Tab -->
            <div id="branding" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Branding Configuration</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <form id="branding-form">
                        <div class="form-group">
                            <label class="form-label">Company Name</label>
                            <input type="text" id="company-name" class="form-input" value="RSN8TV Trivia">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Tagline</label>
                            <input type="text" id="tagline" class="form-input" value="Real-time multiplayer trivia">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Main Logo URL</label>
                            <input type="text" id="logo-url" class="form-input" placeholder="https://...">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Footer Text</label>
                            <textarea id="footer-text" class="form-input" rows="3">© 2025 RSN8TV. All rights reserved.</textarea>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Prizes Tab -->
            <div id="prizes" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Prize Management</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Prize Type</th>
                                <th>Period</th>
                                <th>Description</th>
                                <th>Value</th>
                                <th>Min Score</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="prizes-table">
                            <tr>
                                <td colspan="7">Loading prizes...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Email Campaigns Tab -->
            <div id="campaigns" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Email Campaigns</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Campaign Name</th>
                                <th>Subject</th>
                                <th>Status</th>
                                <th>Sent</th>
                                <th>Opens</th>
                                <th>Clicks</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="campaigns-table">
                            <tr>
                                <td colspan="8">Loading campaigns...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Venues Tab -->
            <div id="venues" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Venue Management</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Venue Name</th>
                                <th>Address</th>
                                <th>Contact</th>
                                <th>Display ID</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="venues-table">
                            <tr>
                                <td colspan="7">Loading venues...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Exports Tab -->
            <div id="exports" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Data Exports</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Export Type</th>
                                <th>Status</th>
                                <th>Rows</th>
                                <th>File Size</th>
                                <th>Created</th>
                                <th>Expires</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="exports-table">
                            <tr>
                                <td colspan="7">Loading exports...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Audit Logs Tab -->
            <div id="audit" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">Audit Logs</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>User</th>
                                <th>Action</th>
                                <th>Resource</th>
                                <th>IP Address</th>
                                <th>Status</th>
                                <th>Details</th>
                            </tr>
                        </thead>
                        <tbody id="audit-table">
                            <tr>
                                <td colspan="7">Loading audit logs...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <div class="content-header">
                    <h1 class="content-title">System Settings</h1>
                    <div class="header-actions">
                        <button class="btn" onclick="downloadQuestionsTemplate()">📄 Template</button>
                        <button class="btn" onclick="importQuestions()">📥 Import CSV</button>
                        <button class="btn" onclick="loadAllQuestions()">📊 Load All</button>
                        <button class="btn btn-primary" onclick="showAddQuestionModal()">+ Add Question</button>
                    </div>
                </div>
                <div class="data-table-container">
                    <form id="settings-form">
                        <h3>Game Settings</h3>
                        <div class="form-group">
                            <label class="form-label">Default Question Time (seconds)</label>
                            <input type="number" id="question-time" class="form-input" value="30">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Questions Per Round</label>
                            <input type="number" id="questions-per-round" class="form-input" value="10">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Max Players Per Session</label>
                            <input type="number" id="max-players" class="form-input" value="100">
                        </div>
                        <h3>API Settings</h3>
                        <div class="form-group">
                            <label class="form-label">Trivia API Source</label>
                            <select id="api-source" class="form-select">
                                <option value="trivia_api">Open Trivia Database</option>
                                <option value="custom">Custom Questions Only</option>
                            </select>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title" id="modal-title">Modal Title</h2>
                <div class="modal-close" onclick="closeModal()">×</div>
            </div>
            <div id="modal-body">
                <!-- Dynamic content -->
            </div>
            <div class="modal-footer" id="modal-footer">
                <!-- Dynamic buttons -->
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <script>
        // API Configuration
        const API_BASE = window.location.hostname === 'localhost' ? 'http://localhost:3000/api' : '/api';
        let authToken = localStorage.getItem('authToken');
        let currentUser = null;

        // Pagination variables for questions
        let currentQuestionPage = 1;
        let questionsPerPage = 10000;
        let categoriesLoaded = false;
        let totalQuestions = 0;
        let allQuestions = [];
        let filteredQuestions = [];

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            checkAuth();
            setupEventListeners();
        });

        // Setup Event Listeners
        function setupEventListeners() {
            // Login form
            document.getElementById('login-form').addEventListener('submit', handleLogin);

            // Tab switching
            document.querySelectorAll('.nav-item').forEach(item => {
                item.addEventListener('click', function() {
                    const tabName = this.dataset.tab;
                    switchTab(tabName);
                });
            });
        }

        // Authentication
        async function checkAuth() {
            if (!authToken) {
                showLogin();
                return;
            }

            try {
                const response = await apiCall('/auth/me');
                currentUser = response.user;
                document.getElementById('current-user').textContent = currentUser.username;
                hideLogin();
                loadDashboard();
            } catch (error) {
                console.error('Auth check failed:', error);
                showLogin();
            }
        }

        async function handleLogin(e) {
            e.preventDefault();
            const username = document.getElementById('login-username').value;
            const password = document.getElementById('login-password').value;

            try {
                const response = await fetch(`${API_BASE}/auth/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });

                if (!response.ok) {
                    throw new Error('Invalid credentials');
                }

                const data = await response.json();
                authToken = data.data.accessToken;
                localStorage.setItem('authToken', authToken);
                currentUser = data.data.user;

                document.getElementById('current-user').textContent = currentUser.username;
                hideLogin();
                loadDashboard();
                showToast('Login successful!', 'success');
            } catch (error) {
                document.getElementById('login-error').textContent = 'Invalid username or password';
                document.getElementById('login-error').style.display = 'block';
            }
        }

        function showLogin() {
            document.getElementById('login-container').classList.remove('hidden');
        }

        function hideLogin() {
            document.getElementById('login-container').classList.add('hidden');
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                localStorage.removeItem('authToken');
                authToken = null;
                currentUser = null;
                showLogin();
            }
        }

        // API Helper
        async function apiCall(endpoint, options = {}) {
            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json'
                }
            };

            // Add auth token if available
            if (authToken) {
                defaultOptions.headers['Authorization'] = `Bearer ${authToken}`;
            }

            try {
                const response = await fetch(`${API_BASE}${endpoint}`, {
                    ...defaultOptions,
                    ...options,
                    headers: {
                        ...defaultOptions.headers,
                        ...options.headers
                    }
                });

                if (response.status === 401) {
                    // Token expired or invalid
                    localStorage.removeItem('authToken');
                    authToken = null;
                    showLogin();
                    throw new Error('Authentication required');
                }

                if (!response.ok) {
                    throw new Error(`API Error: ${response.status}`);
                }

                const text = await response.text();
                return text ? JSON.parse(text) : {};
            } catch (error) {
                console.error('API Call Failed:', error);
                throw error;
            }
        }

        // Tab Management
        function switchTab(tabName) {
            // Update nav items
            document.querySelectorAll('.nav-item').forEach(nav => {
                nav.classList.remove('active');
            });
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
            
            // Update content
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.getElementById(tabName).classList.add('active');
            
            // Load tab data
            loadTabData(tabName);
        }

        // Load tab data
        async function loadTabData(tabName) {
            try {
                switch(tabName) {
                    case 'dashboard':
                        await loadDashboard();
                        break;
                    case 'sessions':
                        await loadSessions();
                        break;
                    case 'players':
                        await loadPlayers();
                        break;
                    case 'leaderboards':
                        await loadLeaderboards();
                        break;
                    case 'questions':
                        if (!categoriesLoaded) {
                            await loadQuestionCategories();
                            categoriesLoaded = true;
                        }
                        await loadQuestions();
                        break;
                    case 'categories':
                        await loadCategories();
                        break;
                    case 'themes':
                        await loadThemes();
                        break;
                    case 'branding':
                        await loadBranding();
                        break;
                    case 'prizes':
                        await loadPrizes();
                        break;
                    case 'campaigns':
                        await loadCampaigns();
                        break;
                    case 'venues':
                        await loadVenues();
                        break;
                    case 'exports':
                        await loadExports();
                        break;
                    case 'audit':
                        await loadAuditLogs();
                        break;
                    case 'settings':
                        await loadSettings();
                        break;
                }
            } catch (error) {
                console.error(`Failed to load ${tabName}:`, error);
                showToast(`Failed to load ${tabName} data`, 'error');
            }
        }

        // Dashboard functions
        async function loadDashboard() {
            try {
                // Load stats - CORRECT ENDPOINT FROM DOCS
                const stats = await apiCall('/admin/stats');
                document.getElementById('active-sessions').textContent = stats.activeSessions || 0;
                document.getElementById('total-players').textContent = stats.totalPlayers || 0;
                document.getElementById('total-questions').textContent = stats.totalQuestions || 0;
                document.getElementById('games-today').textContent = stats.gamesToday || 0;

                // Load recent sessions - CORRECT ENDPOINT FROM DOCS
                const sessions = await apiCall('/admin/sessions');
                updateRecentSessionsTable(sessions.sessions || sessions || []);
            } catch (error) {
                console.error('Failed to load dashboard:', error);
                // Set default values
                document.getElementById('active-sessions').textContent = '0';
                document.getElementById('total-players').textContent = '0';
                document.getElementById('total-questions').textContent = '0';
                document.getElementById('games-today').textContent = '0';
            }
        }

        async function refreshDashboard() {
            showToast('Refreshing dashboard...', 'success');
            await loadDashboard();
        }

        // Sessions functions
        async function loadSessions() {
            try {
                // Using CORRECT endpoint from docs
                const response = await apiCall('/admin/sessions');
                const sessions = response.sessions || response || [];
                updateSessionsTable(sessions);
            } catch (error) {
                console.error('Failed to load sessions:', error);
                updateSessionsTable([]);
            }
        }

        // Players functions - FIXED TO USE CORRECT ENDPOINTS
        async function loadPlayers() {
            try {
                const response = await apiCall('/admin/players');
                const players = response.data || response || [];
                updatePlayersTable(players);
            } catch (error) {
                console.error('Failed to load players:', error);
                updatePlayersTable([]);
                showToast('Failed to load player data', 'error');
            }
        }

        // Leaderboards functions - USING CORRECT ENDPOINT
        async function loadLeaderboards() {
            try {
                const response = await apiCall('/leaderboards');
                const leaderboard = response.leaderboard || response || [];
                updateLeaderboardTable(leaderboard);
            } catch (error) {
                console.error('Failed to load leaderboards:', error);
                updateLeaderboardTable([]);
            }
        }

        // Questions functions - USING CORRECT ENDPOINTS FROM DOCS
        
        
        
        async function loadAllQuestions() {
            try {
                showToast('Loading all questions... This may take a moment', 'success');
                
                // Try to get ALL questions with a very high limit
                const response = await apiCall('/admin/questions?limit=10000');
                
                if (response.data) {
                    allQuestions = response.data;
                } else if (Array.isArray(response)) {
                    allQuestions = response;
                } else if (response.questions) {
                    allQuestions = response.questions;
                }
                
                if (allQuestions.length <= 50) {
                    // Backend is still limiting, need to fetch in batches
                    showToast('Backend is limiting results. Trying pagination...', 'error');
                    
                    // Try multiple pages
                    let page = 2;
                    let hasMore = true;
                    while (hasMore && page <= 100) { // Safety limit
                        const nextResponse = await apiCall(`/admin/questions?page=${page}&limit=50`);
                        const nextQuestions = nextResponse.data || nextResponse.questions || nextResponse || [];
                        if (nextQuestions.length > 0) {
                            allQuestions = allQuestions.concat(nextQuestions);
                            page++;
                        } else {
                            hasMore = false;
                        }
                    }
                }
                
                showToast(`Loaded ${allQuestions.length} questions`, 'success');
                
                // Store globally for client-side operations
                window.allQuestionsCache = allQuestions;
                totalQuestions = allQuestions.length;
                
                // Display first page
                const paginatedQuestions = allQuestions.slice(0, questionsPerPage);
                updateQuestionsTable(paginatedQuestions, allQuestions.length, 1);
                
                // Update stats
                const customQuestions = allQuestions.filter(q => q.is_custom === true);
                const flaggedQuestions = allQuestions.filter(q => q.is_flagged === true);
                const activeQuestions = allQuestions.filter(q => !q.is_flagged && (q.is_active !== false));
                
                document.getElementById('total-questions-stat').textContent = allQuestions.length;
                document.getElementById('active-questions').textContent = activeQuestions.length;
                document.getElementById('flagged-questions').textContent = flaggedQuestions.length;
                document.getElementById('custom-questions').textContent = customQuestions.length;
            } catch (error) {
                console.error('Failed to load all questions:', error);
                showToast('Failed to load all questions', 'error');
            }
        }

        async function loadQuestions(page = 1) {
            try {
                // Request paginated data from server
                // The backend needs to support ?page=X&limit=Y parameters
                const response = await apiCall(`/admin/questions?page=${page}&limit=${questionsPerPage}`);
                
                // Handle different response formats
                let questions = [];
                let total = 0;
                
                if (response.data) {
                    // Paginated response format: { data: [...], total: X, page: Y }
                    questions = response.data;
                    total = response.total || response.totalCount || questions.length;
                } else if (Array.isArray(response)) {
                    // Simple array response - request ALL questions
                    // Backend might be limiting to 50, we need to fix this server-side
                    questions = response;
                    total = response.length;
                    
                    // If we only got 50, try to get all with a higher limit
                    if (questions.length === 50) {
                        const allResponse = await apiCall(`/admin/questions?limit=10000`);
                        if (Array.isArray(allResponse)) {
                            questions = allResponse;
                            total = allResponse.length;
                            // Now do client-side pagination
                            const startIdx = (page - 1) * questionsPerPage;
                            const endIdx = startIdx + questionsPerPage;
                            questions = questions.slice(startIdx, endIdx);
                        }
                    }
                } else if (response.questions) {
                    questions = response.questions;
                    total = response.total || questions.length;
                }
                
                currentQuestionPage = page;
                totalQuestions = total;
                
                // Update the table with paginated data
                updateQuestionsTable(questions, total, page);
                
                // For stats, we need total counts - request summary if not available
                if (total > questions.length) {
                    // We have pagination, need to get stats separately
                    try {
                        const statsResponse = await apiCall(`/admin/questions/stats`);
                        if (statsResponse) {
                            document.getElementById('total-questions-stat').textContent = statsResponse.total || total;
                            document.getElementById('active-questions').textContent = statsResponse.active || 0;
                            document.getElementById('flagged-questions').textContent = statsResponse.flagged || 0;
                            document.getElementById('custom-questions').textContent = statsResponse.custom || 0;
                        }
                    } catch (e) {
                        // Fallback to basic count
                        document.getElementById('total-questions-stat').textContent = total;
                    }
                } else {
                    // We have all questions, calculate stats
                    const customQuestions = questions.filter(q => q.is_custom === true);
                    const flaggedQuestions = questions.filter(q => q.is_flagged === true);
                    const activeQuestions = questions.filter(q => !q.is_flagged && (q.is_active !== false));
                    
                    document.getElementById('total-questions-stat').textContent = total;
                    document.getElementById('active-questions').textContent = activeQuestions.length;
                    document.getElementById('flagged-questions').textContent = flaggedQuestions.length;
                    document.getElementById('custom-questions').textContent = customQuestions.length;
                }
                
                // Load categories for filter
                loadQuestionCategories();
            } catch (error) {
                console.error('Failed to load questions:', error);
                updateQuestionsTable([], 0, 1);
                showToast('Failed to load questions', 'error');
            }
        }

        async function loadQuestionCategories() {
            try {
                const response = await apiCall('/admin/questions/categories');
                const categories = response.categories || response || [];
                const select = document.getElementById('question-category');
                if (select) {
                    select.innerHTML = '<option value="">All Categories</option>' + 
                        categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');
                }
            } catch (error) {
                console.error('Failed to load categories:', error);
            }
        }

        // Other tab loaders - USING EXACT ENDPOINTS FROM DOCS
        async function loadCategories() {
            try {
                // Get categories
                const categoriesResponse = await apiCall('/admin/questions/categories');
                const categories = categoriesResponse.data || categoriesResponse.categories || categoriesResponse || [];
                
                // Get all questions to calculate stats per category
                const questionsResponse = await apiCall('/admin/questions');
                const questions = questionsResponse.data || questionsResponse.questions || questionsResponse || [];
                
                // Calculate stats for each category
                const categoryStats = categories.map(category => {
                    const categoryQuestions = questions.filter(q => q.category === category);
                    const totalQuestions = categoryQuestions.length;
                    const flaggedCount = categoryQuestions.filter(q => q.is_flagged).length;
                    const activeCount = totalQuestions - flaggedCount;
                    
                    // Calculate average difficulty
                    const difficultyMap = { easy: 1, medium: 2, hard: 3 };
                    const avgDifficulty = categoryQuestions.length > 0
                        ? categoryQuestions.reduce((sum, q) => sum + (difficultyMap[q.difficulty] || 2), 0) / categoryQuestions.length
                        : 2;
                    const difficultyLabel = avgDifficulty <= 1.5 ? 'Easy' : avgDifficulty <= 2.5 ? 'Medium' : 'Hard';
                    
                    // Calculate success rate
                    const totalAttempts = categoryQuestions.reduce((sum, q) => sum + (q.times_attempted || 0), 0);
                    const totalCorrect = categoryQuestions.reduce((sum, q) => sum + (q.times_correct || 0), 0);
                    const successRate = totalAttempts > 0 ? Math.round((totalCorrect / totalAttempts) * 100) : 0;
                    
                    return {
                        name: category,
                        totalQuestions,
                        activeCount,
                        difficultyLabel,
                        successRate
                    };
                });
                
                updateCategoriesTable(categoryStats);
            } catch (error) {
                console.error('Failed to load categories:', error);
                updateCategoriesTable([]);
            }
        }

        async function loadThemes() {
            try {
                const response = await apiCall('/admin/themes');
                const themes = response.themes || response || [];
                updateThemesTable(themes);
            } catch (error) {
                console.error('Failed to load themes:', error);
            }
        }

        async function loadBranding() {
            try {
                const response = await apiCall('/admin/branding');
                const branding = response.branding || response || {};
                document.getElementById('company-name').value = branding.company_name || 'RSN8TV Trivia';
                document.getElementById('tagline').value = branding.tagline || 'Real-time multiplayer trivia';
                document.getElementById('logo-url').value = branding.main_logo_url || '';
                document.getElementById('footer-text').value = branding.footer_text || '© 2025 RSN8TV. All rights reserved.';
            } catch (error) {
                console.error('Failed to load branding:', error);
            }
        }

        async function loadPrizes() {
            try {
                const [timeBased, threshold] = await Promise.all([
                    apiCall('/admin/prizes/time-based'),
                    apiCall('/admin/prizes/threshold')
                ]);
                const prizes = [...(timeBased.prizes || []), ...(threshold.prizes || [])];
                updatePrizesTable(prizes);
            } catch (error) {
                console.error('Failed to load prizes:', error);
                updatePrizesTable([]);
            }
        }

        async function loadCampaigns() {
            try {
                const response = await apiCall('/admin/campaigns');
                const campaigns = response.campaigns || response || [];
                updateCampaignsTable(campaigns);
            } catch (error) {
                console.error('Failed to load campaigns:', error);
                updateCampaignsTable([]);
            }
        }

        async function loadVenues() {
            try {
                const response = await apiCall('/admin/venues');
                const venues = response.venues || response || [];
                updateVenuesTable(venues);
            } catch (error) {
                console.error('Failed to load venues:', error);
                updateVenuesTable([]);
            }
        }

        async function loadExports() {
            try {
                const response = await apiCall('/admin/exports');
                const exports = response.exports || response || [];
                updateExportsTable(exports);
            } catch (error) {
                console.error('Failed to load exports:', error);
                updateExportsTable([]);
            }
        }

        async function loadAuditLogs() {
            try {
                const response = await apiCall('/admin/audit-logs');
                const logs = response.logs || response || [];
                updateAuditTable(logs);
            } catch (error) {
                console.error('Failed to load audit logs:', error);
                updateAuditTable([]);
            }
        }

        async function loadSettings() {
            try {
                const response = await apiCall('/admin/settings');
                const settings = response.settings || response || {};
                // Populate settings form with data
                if (settings.question_time) document.getElementById('question-time').value = settings.question_time;
                if (settings.questions_per_round) document.getElementById('questions-per-round').value = settings.questions_per_round;
                if (settings.max_players) document.getElementById('max-players').value = settings.max_players;
                if (settings.api_source) document.getElementById('api-source').value = settings.api_source;
            } catch (error) {
                console.error('Failed to load settings:', error);
            }
        }

        // Table update functions
        function updateRecentSessionsTable(sessions) {
            const tbody = document.getElementById('recent-sessions-table');
            if (!sessions || sessions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7">No sessions found</td></tr>';
                return;
            }
            
            tbody.innerHTML = sessions.map(session => `
                <tr>
                    <td>${session.id ? session.id.substring(0, 8) : 'N/A'}</td>
                    <td><strong>${session.room_code || 'N/A'}</strong></td>
                    <td>${session.player_count || 0}</td>
                    <td>${session.current_round || 1}/${session.total_rounds || 3}</td>
                    <td><span class="status-badge ${session.is_active ? 'active' : 'inactive'}">${session.is_active ? 'Active' : 'Inactive'}</span></td>
                    <td>${session.created_at ? new Date(session.created_at).toLocaleString() : 'N/A'}</td>
                    <td>
                        <button class="btn" onclick="viewSession('${session.id}')">View</button>
                    </td>
                </tr>
            `).join('');
        }

        function updateSessionsTable(sessions) {
            const tbody = document.getElementById('sessions-table');
            if (!sessions || sessions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9">No sessions found</td></tr>';
                return;
            }
            
            tbody.innerHTML = sessions.map(session => `
                <tr>
                    <td>${session.id ? session.id.substring(0, 8) : 'N/A'}</td>
                    <td><strong>${session.room_code || 'N/A'}</strong></td>
                    <td>${session.host_id ? session.host_id.substring(0, 8) : 'N/A'}</td>
                    <td>${session.player_count || 0}</td>
                    <td>${session.current_round || 1}/${session.total_rounds || 3}</td>
                    <td>${session.current_question || 0}/10</td>
                    <td><span class="status-badge ${session.is_active ? 'active' : 'inactive'}">${session.is_active ? 'Active' : 'Inactive'}</span></td>
                    <td>${session.created_at ? new Date(session.created_at).toLocaleString() : 'N/A'}</td>
                    <td>
                        <button class="btn" onclick="viewSession('${session.id}')">View</button>
                        ${session.is_active ? `<button class="btn" onclick="endSession('${session.id}')">End</button>` : ''}
                    </td>
                </tr>
            `).join('');
        }

        function updatePlayersTable(players) {
            const tbody = document.getElementById('players-table');
            if (!players || players.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9">No players found</td></tr>';
                return;
            }
            
            tbody.innerHTML = players.map(player => `
                <tr>
                    <td>${player.id}</td>
                    <td>${player.nickname || 'Anonymous'}</td>
                    <td>${player.email || 'N/A'}</td>
                    <td>${player.total_games_played || 0}</td>
                    <td>${player.total_score || 0}</td>
                    <td>${player.last_played ? new Date(player.last_played).toLocaleDateString() : 'Never'}</td>
                    <td><span class="status-badge ${player.email_verified ? 'active' : 'pending'}">
                        ${player.email_verified ? 'Yes' : 'No'}
                    </span></td>
                    <td><span class="status-badge ${player.marketing_consent ? 'active' : 'inactive'}">
                        ${player.marketing_consent ? 'Yes' : 'No'}
                    </span></td>
                    <td>
                        <button class="btn" onclick="viewPlayer('${player.id}')">View</button>
                    </td>
                </tr>
            `).join('');
        }

        function updateLeaderboardTable(leaderboard) {
            const tbody = document.getElementById('leaderboard-table');
            if (!leaderboard || leaderboard.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8">No leaderboard data</td></tr>';
                return;
            }
            
            tbody.innerHTML = leaderboard.map((entry, index) => `
                <tr>
                    <td><strong>${entry.rank_position || index + 1}</strong></td>
                    <td>${entry.nickname || 'Anonymous'}</td>
                    <td>${entry.email || 'N/A'}</td>
                    <td>${entry.total_score || 0}</td>
                    <td>${entry.games_played || 0}</td>
                    <td>${entry.average_score ? Math.round(entry.average_score) : 0}</td>
                    <td>${entry.period_type || 'weekly'}</td>
                    <td>
                        <button class="btn" onclick="viewPlayer('${entry.player_profile_id}')">View</button>
                    </td>
                </tr>
            `).join('');
        }

        function updateQuestionsTable(questions, totalCount = 0, currentPage = 1) {
            const tbody = document.getElementById('questions-table');
            if (!questions || questions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8">No questions found</td></tr>';
                // Clear pagination if no results
                const container = document.querySelector('#questions .data-table-container');
                const existingPagination = container.querySelector('.pagination-controls');
                if (existingPagination) existingPagination.remove();
                return;
            }

            tbody.innerHTML = questions.map(question => {
                // Correct field mapping for question_cache table
                const questionId = question.id;
                const questionText = question.question_text || question.question || 'N/A';
                const correctAnswer = question.correct_answer || 'N/A';
                const incorrectAnswers = question.incorrect_answers || [];
                const category = question.category || 'General';
                const difficulty = question.difficulty || 'medium';
                const timesUsed = question.times_used || question.usage_count || 0;
                const timesAttempted = question.times_attempted || 0;
                const timesCorrect = question.times_correct || 0;
                const successRate = timesAttempted > 0
                    ? Math.round((timesCorrect / timesAttempted) * 100)
                    : 0;
                const isCustom = question.is_custom || false;
                const isFlagged = question.is_flagged || false;
                const isActive = question.is_active !== false;
                const source = question.api_question_id ? 'API' : (isCustom ? 'Custom' : 'DB');

                return `
                    <tr>
                        <td>${questionId}</td>
                        <td title="${questionText.replace(/"/g, '&quot;')}">${questionText.substring(0, 50)}${questionText.length > 50 ? '...' : ''}</td>
                        <td>${category}</td>
                        <td><span class="status-badge ${difficulty}">${difficulty}</span></td>
                        <td>${timesUsed}</td>
                        <td>${successRate}%</td>
                        <td>
                            <span class="status-badge ${isFlagged ? 'inactive' : (isActive ? 'active' : 'inactive')}">
                                ${isFlagged ? 'Flagged' : (isActive ? 'Active' : 'Inactive')}
                            </span>
                            <small>(${source})</small>
                        </td>
                        <td>
                            <button class="btn" onclick="editQuestion(${questionId})">Edit</button>
                            ${!isFlagged ? `<button class="btn" onclick="flagQuestion(${questionId})">Flag</button>` : ''}
                        </td>
                    </tr>
                `;
            }).join('');
            
            // Add pagination controls
            const container = document.querySelector('#questions .data-table-container');
            let paginationDiv = container.querySelector('.pagination-controls');
            if (!paginationDiv) {
                paginationDiv = document.createElement('div');
                paginationDiv.className = 'pagination-controls';
                paginationDiv.style.cssText = 'display: flex; justify-content: space-between; align-items: center; padding: 20px 0; border-top: 1px solid var(--glass-border);';
                container.appendChild(paginationDiv);
            }
            
            const totalPages = Math.ceil(totalCount / questionsPerPage);
            const startItem = ((currentPage - 1) * questionsPerPage) + 1;
            const endItem = Math.min(currentPage * questionsPerPage, totalCount);
            
            paginationDiv.innerHTML = `
                <div style="color: var(--text-secondary);">
                    Showing ${startItem}-${endItem} of ${totalCount} questions
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn" onclick="loadQuestions(1)" ${currentPage === 1 ? 'disabled' : ''}>First</button>
                    <button class="btn" onclick="loadQuestions(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
                    <span style="padding: 10px;">Page ${currentPage} of ${totalPages}</span>
                    <button class="btn" onclick="loadQuestions(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>
                    <button class="btn" onclick="loadQuestions(${totalPages})" ${currentPage === totalPages ? 'disabled' : ''}>Last</button>
                </div>
            `;
        }

        function updateCategoriesTable(categories) {
            const tbody = document.getElementById('categories-table');
            if (!categories || categories.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5">No categories found</td></tr>';
                return;
            }

            tbody.innerHTML = categories.map(category => {
                const stats = category.totalQuestions !== undefined ? category : { 
                    name: category,
                    totalQuestions: 0,
                    activeCount: 0,
                    difficultyLabel: 'Medium',
                    successRate: 0
                };
                
                return `
                    <tr>
                        <td>${stats.name}</td>
                        <td>${stats.totalQuestions} (${stats.activeCount} active)</td>
                        <td>${stats.difficultyLabel}</td>
                        <td>${stats.successRate}%</td>
                        <td>
                            <button class="btn" onclick="viewCategory('${stats.name}')">View Questions</button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function updateThemesTable(themes) {
            const tbody = document.getElementById('themes-table');
            if (!themes || themes.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6">No themes found</td></tr>';
                return;
            }
            
            tbody.innerHTML = themes.map(theme => `
                <tr>
                    <td>${theme.name}</td>
                    <td>${theme.description || 'No description'}</td>
                    <td>${theme.is_default ? 'Default' : 'Custom'}</td>
                    <td><span class="status-badge ${theme.is_active ? 'active' : 'inactive'}">
                        ${theme.is_active ? 'Active' : 'Inactive'}
                    </span></td>
                    <td>${theme.created_at ? new Date(theme.created_at).toLocaleDateString() : 'N/A'}</td>
                    <td>
                        <button class="btn" onclick="previewTheme('${theme.id}')">Preview</button>
                        ${!theme.is_active ? `<button class="btn" onclick="activateTheme('${theme.id}')">Activate</button>` : ''}
                    </td>
                </tr>
            `).join('');
        }

        function updatePrizesTable(prizes) {
            const tbody = document.getElementById('prizes-table');
            if (!prizes || prizes.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7">No prizes configured</td></tr>';
                return;
            }
            
            tbody.innerHTML = prizes.map(prize => `
                <tr>
                    <td>${prize.type || 'Standard'}</td>
                    <td>${prize.period || 'Weekly'}</td>
                    <td>${prize.description || 'No description'}</td>
                    <td>${prize.prize_value || 'N/A'}</td>
                    <td>${prize.min_score || 0}</td>
                    <td><span class="status-badge ${prize.enabled ? 'active' : 'inactive'}">
                        ${prize.enabled ? 'Enabled' : 'Disabled'}
                    </span></td>
                    <td>
                        <button class="btn" onclick="editPrize('${prize.id}')">Edit</button>
                        <button class="btn" onclick="deletePrize('${prize.id}')">Delete</button>
                    </td>
                </tr>
            `).join('');
        }

        function updateCampaignsTable(campaigns) {
            const tbody = document.getElementById('campaigns-table');
            if (!campaigns || campaigns.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8">No campaigns found</td></tr>';
                return;
            }
            
            tbody.innerHTML = campaigns.map(campaign => `
                <tr>
                    <td>${campaign.name}</td>
                    <td>${campaign.subject}</td>
                    <td><span class="status-badge ${campaign.status}">${campaign.status}</span></td>
                    <td>${campaign.sent_count || 0}</td>
                    <td>${campaign.open_count || 0}</td>
                    <td>${campaign.click_count || 0}</td>
                    <td>${campaign.created_at ? new Date(campaign.created_at).toLocaleDateString() : 'N/A'}</td>
                    <td>
                        <button class="btn" onclick="viewCampaign('${campaign.id}')">View</button>
                        ${campaign.status === 'draft' ? `<button class="btn" onclick="sendCampaign('${campaign.id}')">Send</button>` : ''}
                    </td>
                </tr>
            `).join('');
        }

        function updateVenuesTable(venues) {
            const tbody = document.getElementById('venues-table');
            if (!venues || venues.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7">No venues found</td></tr>';
                return;
            }
            
            tbody.innerHTML = venues.map(venue => `
                <tr>
                    <td>${venue.name}</td>
                    <td>${venue.address || 'N/A'}</td>
                    <td>${venue.contact_info ? JSON.parse(venue.contact_info).phone || 'N/A' : 'N/A'}</td>
                    <td>${venue.xibo_display_id || 'Not configured'}</td>
                    <td><span class="status-badge ${venue.is_active ? 'active' : 'inactive'}">
                        ${venue.is_active ? 'Active' : 'Inactive'}
                    </span></td>
                    <td>${venue.created_at ? new Date(venue.created_at).toLocaleDateString() : 'N/A'}</td>
                    <td>
                        <button class="btn" onclick="editVenue('${venue.id}')">Edit</button>
                    </td>
                </tr>
            `).join('');
        }

        function updateExportsTable(exports) {
            const tbody = document.getElementById('exports-table');
            if (!exports || exports.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7">No exports found</td></tr>';
                return;
            }
            
            tbody.innerHTML = exports.map(exp => `
                <tr>
                    <td>${exp.type}</td>
                    <td><span class="status-badge ${exp.status}">${exp.status}</span></td>
                    <td>${exp.row_count || 0}</td>
                    <td>${exp.file_size ? (exp.file_size / 1024).toFixed(2) + ' KB' : 'N/A'}</td>
                    <td>${exp.created_at ? new Date(exp.created_at).toLocaleDateString() : 'N/A'}</td>
                    <td>${exp.expires_at ? new Date(exp.expires_at).toLocaleDateString() : 'Never'}</td>
                    <td>
                        ${exp.status === 'completed' ? `<button class="btn" onclick="downloadExport('${exp.id}')">Download</button>` : ''}
                        <button class="btn" onclick="deleteExport('${exp.id}')">Delete</button>
                    </td>
                </tr>
            `).join('');
        }

        function updateAuditTable(logs) {
            const tbody = document.getElementById('audit-table');
            if (!logs || logs.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7">No audit logs found</td></tr>';
                return;
            }
            
            tbody.innerHTML = logs.map(log => `
                <tr>
                    <td>${log.created_at ? new Date(log.created_at).toLocaleString() : 'N/A'}</td>
                    <td>${log.username || 'System'}</td>
                    <td>${log.action}</td>
                    <td>${log.resource_type || 'N/A'}</td>
                    <td>${log.ip_address || 'N/A'}</td>
                    <td>${log.response_status || 200}</td>
                    <td>
                        <button class="btn" onclick="viewAuditDetails('${log.id}')">Details</button>
                    </td>
                </tr>
            `).join('');
        }

        // Action functions - USING CORRECT ENDPOINTS FROM DOCS
        async function createNewSession() {
            showModal('Create New Session', `
                <form id="new-session-form">
                    <div class="form-group">
                        <label class="form-label">Number of Rounds</label>
                        <input type="number" id="new-rounds" class="form-input" value="3" min="1" max="10" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Questions Source</label>
                        <select id="new-source" class="form-select" required>
                            <option value="trivia_api">Trivia API</option>
                            <option value="custom">Custom Questions</option>
                        </select>
                    </div>
                </form>
            `, [
                { text: 'Cancel', onclick: closeModal },
                { text: 'Create', primary: true, onclick: async () => {
                    try {
                        // USING CORRECT ENDPOINT: POST /api/sessions/create
                        const response = await apiCall('/sessions/create', {
                            method: 'POST',
                            body: JSON.stringify({
                                total_rounds: document.getElementById('new-rounds').value,
                                questions_source: document.getElementById('new-source').value
                            })
                        });
                        closeModal();
                        showToast('Session created successfully!', 'success');
                        loadSessions();
                    } catch (error) {
                        showToast('Failed to create session', 'error');
                    }
                }}
            ]);
        }

        async function viewSession(sessionId) {
            try {
                // GET /api/sessions/:sessionId/questions from docs
                const questions = await apiCall(`/sessions/${sessionId}/questions`);
                showModal(`Session: ${sessionId}`, `
                    <div>
                        <h3>Session Questions</h3>
                        <p>Total questions: ${questions.length || 0}</p>
                    </div>
                `);
            } catch (error) {
                showToast('Failed to load session details', 'error');
            }
        }

        async function viewPlayer(playerId) {
            try {
                // GET /api/players/:profileId from docs
                const player = await apiCall(`/players/${playerId}`);
                // GET /api/players/:profileId/history from docs
                const history = await apiCall(`/players/${playerId}/history`);
                
                showModal(`Player: ${player.nickname}`, `
                    <div>
                        <p><strong>Email:</strong> ${player.email}</p>
                        <p><strong>Games Played:</strong> ${player.total_games_played}</p>
                        <p><strong>Total Score:</strong> ${player.total_score}</p>
                        <p><strong>Last Played:</strong> ${player.last_played ? new Date(player.last_played).toLocaleString() : 'Never'}</p>
                        <h3>Recent Games</h3>
                        ${history.map(game => `
                            <div style="margin: 10px 0;">
                                Session: ${game.session_id}, Score: ${game.score}
                            </div>
                        `).join('')}
                    </div>
                `);
            } catch (error) {
                showToast('Failed to load player details', 'error');
            }
        }

        async function editQuestion(questionId) {
            try {
                // GET /api/admin/questions/:id from docs
                const response = await apiCall(`/admin/questions/${questionId}`);
                const question = response.data || response;
                
                // Correct field mapping
                const questionText = question.question_text || question.question || '';
                const correctAnswer = question.correct_answer || '';
                const incorrectAnswers = question.incorrect_answers || [];
                const category = question.category || '';
                const difficulty = question.difficulty || 'medium';
                
                showModal('Edit Question', `
                    <form id="edit-question-form">
                        <div class="form-group">
                            <label class="form-label">Question</label>
                            <textarea id="edit-question-text" class="form-input" rows="3" required>${questionText.replace(/`/g, '\`')}</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Correct Answer</label>
                            <input type="text" id="edit-correct" class="form-input" value="${correctAnswer.replace(/"/g, '&quot;')}" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Incorrect Answers (one per line)</label>
                            <textarea id="edit-incorrect" class="form-input" rows="3" required>${incorrectAnswers.join('\n')}</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <input type="text" id="edit-category" class="form-input" value="${category.replace(/"/g, '&quot;')}" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Difficulty</label>
                            <select id="edit-difficulty" class="form-select">
                                <option value="easy" ${difficulty === 'easy' ? 'selected' : ''}>Easy</option>
                                <option value="medium" ${difficulty === 'medium' ? 'selected' : ''}>Medium</option>
                                <option value="hard" ${difficulty === 'hard' ? 'selected' : ''}>Hard</option>
                            </select>
                        </div>
                    </form>
                `, [
                    { text: 'Cancel', onclick: closeModal },
                    { text: 'Save', primary: true, onclick: async () => {
                        try {
                            // PUT /api/admin/questions/:id from docs
                            await apiCall(`/admin/questions/${questionId}`, {
                                method: 'PUT',
                                body: JSON.stringify({
                                    question_text: document.getElementById('edit-question-text').value,
                                    correct_answer: document.getElementById('edit-correct').value,
                                    incorrect_answers: document.getElementById('edit-incorrect').value.split('\n').filter(a => a.trim()),
                                    category: document.getElementById('edit-category').value,
                                    difficulty: document.getElementById('edit-difficulty').value
                                })
                            });
                            closeModal();
                            showToast('Question updated successfully', 'success');
                            loadQuestions(currentQuestionPage);
                        } catch (error) {
                            showToast('Failed to update question', 'error');
                        }
                    }}
                ]);
            } catch (error) {
                showToast('Failed to load question', 'error');
            }
        }

        async function flagQuestion(questionId) {
            if (confirm('Are you sure you want to flag this question?')) {
                try {
                    // POST /api/admin/questions/:id/flag from docs
                    await apiCall(`/admin/questions/${questionId}/flag`, { method: 'POST' });
                    showToast('Question flagged successfully', 'success');
                    loadQuestions();
                } catch (error) {
                    showToast('Failed to flag question', 'error');
                }
            }
        }

        async function saveBranding() {
            try {
                // PUT /api/admin/branding/ from docs
                await apiCall('/admin/branding/', {
                    method: 'PUT',
                    body: JSON.stringify({
                        company_name: document.getElementById('company-name').value,
                        tagline: document.getElementById('tagline').value,
                        main_logo_url: document.getElementById('logo-url').value,
                        footer_text: document.getElementById('footer-text').value
                    })
                });
                showToast('Branding updated successfully', 'success');
            } catch (error) {
                showToast('Failed to update branding', 'error');
            }
        }

        async function exportPlayers() {
            try {
                // POST /api/admin/exports/ from docs
                const response = await apiCall('/admin/exports', {
                    method: 'POST',
                    body: JSON.stringify({ type: 'players' })
                });
                showToast('Export started. Check the Exports tab for download.', 'success');
            } catch (error) {
                showToast('Failed to start export', 'error');
            }
        }

        async function downloadExport(exportId) {
            // GET /api/admin/exports/:id/download from docs
            window.open(`${API_BASE}/admin/exports/${exportId}/download`, '_blank');
        }

        async function deleteExport(exportId) {
            if (confirm('Are you sure you want to delete this export?')) {
                try {
                    // DELETE /api/admin/exports/:id from docs
                    await apiCall(`/admin/exports/${exportId}`, { method: 'DELETE' });
                    showToast('Export deleted successfully', 'success');
                    loadExports();
                } catch (error) {
                    showToast('Failed to delete export', 'error');
                }
            }
        }

        async function downloadQuestionsTemplate() {
            // GET /api/admin/questions/csv-template from docs
            window.open(`${API_BASE}/admin/questions/csv-template`, '_blank');
        }

        async function resetTheme() {
            if (confirm('Are you sure you want to reset to the default theme?')) {
                try {
                    // POST /api/admin/themes/reset from docs
                    await apiCall('/admin/themes/reset', { method: 'POST' });
                    showToast('Theme reset to default', 'success');
                    loadThemes();
                } catch (error) {
                    showToast('Failed to reset theme', 'error');
                }
            }
        }

        // Search and filter functions
        function searchSessions() {
            const searchTerm = document.getElementById('session-search').value.toLowerCase();
            const rows = document.querySelectorAll('#sessions-table tr');
            rows.forEach(row => {
                const roomCode = row.cells[1]?.textContent.toLowerCase();
                if (roomCode && roomCode.includes(searchTerm)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function searchPlayers() {
            const searchTerm = document.getElementById('player-search').value.toLowerCase();
            const rows = document.querySelectorAll('#players-table tr');
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function searchQuestions() {

        function viewCategory(categoryName) {
            // Switch to questions tab and filter by category
            switchTab('questions');
            const categorySelect = document.getElementById('question-category');
            if (categorySelect) {
                categorySelect.value = categoryName;
                filterQuestions();
            }
        }
            const searchTerm = document.getElementById('question-search').value.toLowerCase();
            const rows = document.querySelectorAll('#questions-table tr');
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        }

        function filterQuestionsList(questions) {
            const category = document.getElementById('question-category').value;
            const difficulty = document.getElementById('question-difficulty').value;
            const searchTerm = document.getElementById('question-search').value.toLowerCase();
            
            return questions.filter(q => {
                const matchCategory = !category || q.category === category;
                const matchDifficulty = !difficulty || q.difficulty === difficulty;
                const questionText = (q.question_text || q.question || '').toLowerCase();
                const matchSearch = !searchTerm || questionText.includes(searchTerm) || 
                                   (q.category || '').toLowerCase().includes(searchTerm);
                return matchCategory && matchDifficulty && matchSearch;
            });
        }
        
        function filterQuestions() {
            loadQuestions(1); // Reset to page 1 when filtering
        }

        // Modal functions
        function showModal(title, content, buttons = []) {
            document.getElementById('modal-title').textContent = title;
            document.getElementById('modal-body').innerHTML = content;
            
            const footer = document.getElementById('modal-footer');
            footer.innerHTML = '';
            
            if (buttons.length > 0) {
                buttons.forEach(button => {
                    const btn = document.createElement('button');
                    btn.className = button.primary ? 'btn btn-primary' : 'btn';
                    btn.textContent = button.text;
                    btn.onclick = button.onclick;
                    footer.appendChild(btn);
                });
            } else {
                const closeBtn = document.createElement('button');
                closeBtn.className = 'btn';
                closeBtn.textContent = 'Close';
                closeBtn.onclick = closeModal;
                footer.appendChild(closeBtn);
            }
            
            document.getElementById('modal').classList.add('active');
        }

        function closeModal() {
            document.getElementById('modal').classList.remove('active');
        }

        // Toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast show ${type}`;
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Initialize
        window.addEventListener('load', () => {
            // Check if we're already logged in
            if (authToken) {
                checkAuth();
            }
        });
    </script>
</body>
</html>
