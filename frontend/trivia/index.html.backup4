<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>RSN8TV Trivia</title>
    <link rel="stylesheet" href="/player.css">
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@fingerprintjs/fingerprintjs@3/dist/fp.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef } = React;

        const API_URL = window.location.origin;

        function TriviaApp() {
            const [gameState, setGameState] = useState('joining');
            const [nickname, setNickname] = useState('');
            const [sessionId, setSessionId] = useState('');
            const [playerId, setPlayerId] = useState('');
            const [isFirstPlayer, setIsFirstPlayer] = useState(false);
            const [countdown, setCountdown] = useState(0);
            const [socket, setSocket] = useState(null);
            const [error, setError] = useState('');
            const [currentQuestion, setCurrentQuestion] = useState(null);
            const [selectedAnswer, setSelectedAnswer] = useState(null);
            const [timeRemaining, setTimeRemaining] = useState(0);
            const [score, setScore] = useState(0);
            const [roundNumber, setRoundNumber] = useState(1);
            const [questionNumber, setQuestionNumber] = useState(1);
            const [showResult, setShowResult] = useState(false);
            const [lastResult, setLastResult] = useState(null);
            const [finalLeaderboard, setFinalLeaderboard] = useState([]);
            const [isLoading, setIsLoading] = useState(false);
            const [formError, setFormError] = useState('');
            const [hasAnswered, setHasAnswered] = useState(false);
            const [isCorrect, setIsCorrect] = useState(false);
            const [streak, setStreak] = useState(0);
            const [fadedAnswers, setFadedAnswers] = useState([]);
            const [roundIntro, setRoundIntro] = useState(null);
            const [roundIntroCountdown, setRoundIntroCountdown] = useState(10);
            const [isFrozen, setIsFrozen] = useState(false);
            const [frozenTimer, setFrozenTimer] = useState(0);
            const [lightningTimeRemaining, setLightningTimeRemaining] = useState(30);
            const [showStreakBonus, setShowStreakBonus] = useState(null);
            const [finalScore, setFinalScore] = useState(0);
            const [finalRank, setFinalRank] = useState(0);
            const [canChangeAnswer, setCanChangeAnswer] = useState(true);
            const [answerStatus, setAnswerStatus] = useState(null);
            const [questionStartTime, setQuestionStartTime] = useState(null);
            const timerRef = useRef(null);
            const lastAnswerRef = useRef(null);
            const lightningTimerRef = useRef(null);
            const frozenTimerRef = useRef(null);
            const isGameCompleteRef = useRef(false);
            // Registration modal states
            const [showRegistration, setShowRegistration] = useState(false);
            const [registrationData, setRegistrationData] = useState({
                email: '',
                realName: '',
                marketingConsent: false
            });
            const [registrationStatus, setRegistrationStatus] = useState(null);
            const [registrationError, setRegistrationError] = useState('');
            const [deviceFingerprint, setDeviceFingerprint] = useState('');

            // TESTING ONLY - Remove before production
            useEffect(() => {
                window.testRegistration = () => {
                    setGameState('finished');
                    setFinalLeaderboard([{
                        clientId: playerId || 'test-123',
                        nickname: nickname || 'Test Player',
                        totalScore: 314,
                        accuracy: 80,
                        longestStreak: 3,
                        perfectRounds: []
                    }]);
                    setScore(314);
                    setFinalScore(314);
                    setFinalRank(1);
                    setTimeout(() => setShowRegistration(true), 2000);
                };
            }, [playerId, nickname]);

            // Generate device fingerprint on component mount
            useEffect(() => {
                const getFingerprint = async () => {
                    if (window.FingerprintJS) {
                        try {
                            const fp = await FingerprintJS.load();
                            const result = await fp.get();
                            setDeviceFingerprint(result.visitorId);
                        } catch (error) {
                            console.error('Error getting fingerprint:', error);
                            setDeviceFingerprint(`fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);
                        }
                    } else {
                        setDeviceFingerprint(`fallback-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);
                    }
                };
                getFingerprint();
            }, []);

            useEffect(() => {
                // Get session ID from URL
                const path = window.location.pathname;
                const match = path.match(/\/join\/([^\/]+)/);
                if (match) {
                    setSessionId(match[1]);
                } else {
                    setError('Invalid session URL');
                }

                return () => {
                    if (socket) {
                        socket.disconnect();
                    }
                    if (timerRef.current) {
                        clearInterval(timerRef.current);
                    }
                    if (lightningTimerRef.current) {
                        clearInterval(lightningTimerRef.current);
                    }
                    if (frozenTimerRef.current) {
                        clearInterval(frozenTimerRef.current);
                    }
                };
            }, []);

            const joinGame = async (e) => {
                e.preventDefault();
                if (!nickname.trim()) {
                    setFormError('Please enter a nickname');
                    return;
                }

                setIsLoading(true);
                setFormError('');

                try {
                    // Generate a unique player ID
                    const generatedPlayerId = 'player-' + Math.random().toString(36).substr(2, 9);
                    setPlayerId(generatedPlayerId);

                    // Join via HTTP first
                    const response = await fetch(`${API_URL}/api/sessions/${sessionId}/join`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            nickname: nickname.trim(),
                            playerId: generatedPlayerId
                        })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        setFormError(data.error || data.message || 'Failed to join session');
                        setIsLoading(false);
                        return;
                    }

                    // Use the playerId from server response if provided
                    const actualPlayerId = data.playerId || generatedPlayerId;
                    setPlayerId(actualPlayerId);
                    setIsFirstPlayer(data.isFirstPlayer || false);

                    // Connect to Socket.IO
                    const newSocket = io(API_URL, {
                        auth: {
                            role: 'player',
                            sessionId: sessionId,
                            clientId: actualPlayerId
                        },
                        query: {
                            nickname: nickname.trim()
                        }
                    });

                    newSocket.on('connect', () => {
                        console.log('Connected to server');

                        newSocket.emit('player:join_room', {
                            sessionId: sessionId,
                            clientId: actualPlayerId,
                            nickname: nickname.trim()
                        });

                        setGameState('waiting');
                        setError('');
                    });

                    newSocket.on('COUNTDOWN', (data) => {
                        setGameState('countdown');
                        setCountdown(data.count);
                    });

                    newSocket.on('ROUND_INTRO', (data) => {
                        setGameState('round_intro');
                        setRoundIntro(data);
                        setRoundIntroCountdown(data.countdown || 10);
                        setRoundNumber(data.round);
                    });

                    newSocket.on('ROUND_INTRO_COUNTDOWN', (data) => {
                        // This event is no longer sent from backend, so this won't execute
                        setRoundIntroCountdown(data.countdown);
                    });

                    newSocket.on('GAME_STARTING', () => {
                        setGameState('playing');
                        setShowResult(false);
                    });

                    newSocket.on('QUESTION_READY', (data) => {
                        const questionData = {
                            id: data.questionId,
                            text: data.question,
                            options: data.answers || data.options || [],
                            points: data.points || 100,
                            timeLimit: data.timeLimit || 15,
                            category: data.category,
                            difficulty: data.difficulty,
                            fadeAnswers: data.fadeAnswers
                        };

                        setGameState('playing');
                        setCurrentQuestion(questionData);
                        setSelectedAnswer(null);
                        lastAnswerRef.current = null;
                        setHasAnswered(false);
                        setCanChangeAnswer(true);
                        setAnswerStatus(null);
                        setShowResult(false);
                        setFadedAnswers([]);
                        setTimeRemaining(questionData.timeLimit);
                        setRoundNumber(data.round || 1);
                        setQuestionNumber(data.questionNumber || 1);
                        setQuestionStartTime(Date.now());

                        // Start timer
                        if (timerRef.current) clearInterval(timerRef.current);
                        timerRef.current = setInterval(() => {
                            setTimeRemaining(prev => {
                                if (prev <= 0) {
                                    clearInterval(timerRef.current);
                                    return 0;
                                }
                                return prev - 1;
                            });
                        }, 1000);
                    });

                    newSocket.on('FADE_ANSWERS', (data) => {
                        setFadedAnswers(data.fadeIndices || []);
                    });

                    // Handle answer update (just confirmation, no scores)
                    newSocket.on('ANSWER_UPDATE', (data) => {
                        console.log('Answer update:', data);

                        if (data.isPreview) {
                            setSelectedAnswer(data.selectedAnswer);
                            setHasAnswered(true);
                            setAnswerStatus({
                                canChange: data.canChange,
                                timeRemaining: data.timeRemaining
                            });
                        }
                    });

                    newSocket.on('LIGHTNING_QUESTION', (data) => {
                        const questionData = {
                            id: data.questionId,
                            text: data.question,
                            options: data.answers || [],
                            points: data.points,
                            isLightning: true,
                            timeRemaining: data.timeRemaining
                        };

                        setGameState('lightning');
                        setCurrentQuestion(questionData);
                        setSelectedAnswer(null);
                        lastAnswerRef.current = null;
                        setHasAnswered(false);
                        setCanChangeAnswer(true);
                        setLightningTimeRemaining(data.timeRemaining);
                        setQuestionNumber(data.questionNumber);
                        setRoundNumber(4);

                        // Update lightning timer
                        if (!lightningTimerRef.current) {
                            lightningTimerRef.current = setInterval(() => {
                                setLightningTimeRemaining(prev => {
                                    if (prev <= 0) {
                                        clearInterval(lightningTimerRef.current);
                                        lightningTimerRef.current = null;
                                        return 0;
                                    }
                                    return prev - 1;
                                });
                            }, 1000);
                        }
                    });

                    newSocket.on('FROZEN', (data) => {
                        setIsFrozen(true);
                        setFrozenTimer(data.duration);

                        let remaining = data.duration;
                        if (frozenTimerRef.current) {
                            clearInterval(frozenTimerRef.current);
                        }
                        frozenTimerRef.current = setInterval(() => {
                            remaining--;
                            setFrozenTimer(remaining);
                            if (remaining <= 0) {
                                clearInterval(frozenTimerRef.current);
                                setIsFrozen(false);
                            }
                        }, 1000);
                    });

                    newSocket.on('UNFROZEN', () => {
                        setIsFrozen(false);
                        if (frozenTimerRef.current) {
                            clearInterval(frozenTimerRef.current);
                        }
                    });

                    newSocket.on('ANSWER_RESULT', (result) => {
                        // Only process final results after timer expires
                        if (!result.isFinal) return;
                        clearInterval(timerRef.current);
                        setCanChangeAnswer(false);

                        // Process the final result
                        setIsCorrect(result.isCorrect);
                        setLastResult({
                            correct: result.isCorrect,
                            pointsEarned: result.scoring?.finalScore || 0,
                            totalScore: result.playerStats?.totalScore || score,
                            scoring: result.scoring,
                            correctAnswerText: result.correctAnswerText,
                            currentStreak: result.playerStats?.currentStreak || 0,
                            isFinal: true
                        });

                        // Update score and streak
                        setScore(result.playerStats?.totalScore || score);
                        setStreak(result.playerStats?.currentStreak || 0);

                        // Show streak bonus popup
                        if (result.scoring?.streakBonus > 0) {
                            let message = '';
                            if (result.playerStats?.currentStreak === 3) {
                                message = '3 IN A ROW! +50 BONUS';
                            } else if (result.playerStats?.currentStreak === 5) {
                                message = '5 STREAK! +100 BONUS';
                            } else if (result.playerStats?.currentStreak === 10) {
                                message = 'PERFECT 10! +300 BONUS';
                            }

                            if (message) {
                                setShowStreakBonus(message);
                                setTimeout(() => setShowStreakBonus(null), 2000);
                            }
                        }

                        // Show result screen
                        if (roundNumber !== 4) {
                            setShowResult(true);
                            setGameState('result');

                            window.answerResultTimeout = setTimeout(() => {
                                if (!isGameCompleteRef.current) {
                                    setShowResult(false);
                                    setGameState('waiting_for_next');
                                }
                            }, 3000);
                        } else {
                            // Speed round - reset for next question quickly
                            setHasAnswered(false);
                            setSelectedAnswer(null);
                            lastAnswerRef.current = null;
                        }
                    });

                    newSocket.on('ROUND_COMPLETE', (data) => {
                        setGameState('round_complete');
                        setTimeout(() => {
                            setGameState('waiting_for_next');
                        }, 2000);
                    });

                    newSocket.on('LIGHTNING_ROUND_COMPLETE', (data) => {
                        clearInterval(lightningTimerRef.current);
                        lightningTimerRef.current = null;
                        setGameState('lightning_complete');
                    });

                    newSocket.on('GAME_COMPLETE', (data) => {
                        isGameCompleteRef.current = true;
                        setFinalLeaderboard(data.finalScores || []);
                        setFinalScore(data.finalScore || score);
                        setFinalRank(data.rank || 0);
                        setGameState('finished');

                        // Show registration modal after a short delay
                        setTimeout(() => {
                            setShowRegistration(true);
                        }, 2000);
                    });

                    // Handle play again
                    newSocket.on('PLAY_AGAIN', (data) => {
                        console.log('Play again:', data);

                        // Update session info
                        setSessionId(data.newSessionId);

                        // Reset game state
                        setCurrentQuestion(null);
                        setScore(0);
                        setStreak(0);
                        setSelectedAnswer(null);
                        setHasAnswered(false);
                        setCanChangeAnswer(true);
                        setAnswerStatus(null);
                        setShowResult(false);
                        setLastResult(null);
                        setRoundNumber(1);
                        setQuestionNumber(1);
                        setFinalLeaderboard([]);
                        isGameCompleteRef.current = false;

                        // Show waiting screen
                        setGameState('waiting');

                        // Update URL if needed
                        if (window.location.pathname.includes('/join/')) {
                            window.history.replaceState({}, '', `/join/${data.newSessionId}`);
                        }
                    });

                    newSocket.on('TIME_UP', (data) => {
                        clearInterval(timerRef.current);
                        setCanChangeAnswer(false);
                        setFadedAnswers([]);

                        // The ANSWER_RESULT event will handle showing results
                        // This just ensures UI is locked
                    });

                    newSocket.on('QUESTION_COMPLETE', (data) => {
                        setFadedAnswers([]);
                    });

                    newSocket.on('disconnect', (reason) => {
                        console.error('Disconnected:', reason);
                        setError(`Disconnected from server: ${reason}`);
                    });

                    newSocket.on('error', (error) => {
                        console.error('Socket error:', error);
                    });

                    setSocket(newSocket);
                } catch (err) {
                    setFormError('Failed to join game: ' + err.message);
                    setIsLoading(false);
                }
            };

            const startGame = () => {
                if (socket) {
                    socket.emit('START_GAME', {
                        sessionId: sessionId,
                        clientId: playerId
                    });
                }
            };

            const submitAnswer = (answerIndex) => {
                if (!socket || !currentQuestion || isFrozen || !canChangeAnswer) return;

                // Check if answer is faded
                if (fadedAnswers.includes(answerIndex)) return;

                const responseTimeMs = Date.now() - questionStartTime;

                const answerData = {
                    sessionId: sessionId,
                    questionId: currentQuestion.id,
                    answer: answerIndex,
                    answerIndex: answerIndex,
                    answerText: currentQuestion.options[answerIndex],
                    selectedOption: answerIndex + 1,
                    timeRemaining: timeRemaining,
                    responseTimeMs: responseTimeMs
                };

                socket.emit('SUBMIT_ANSWER', answerData);
            };

            const startNewGame = () => {
                if (socket && sessionId) {
                    // Emit event to create new game with same players
                    socket.emit('START_NEW_GAME', {
                        sessionId: sessionId,
                        playerId: playerId
                    });
                }
            };

            const handleRegistrationSubmit = async () => {
                if (!registrationData.email || !registrationData.realName || !registrationData.marketingConsent) {
                    setRegistrationError('Please fill in all fields and accept marketing consent to be eligible for prizes.');
                    return;
                }

                try {
                    const response = await fetch(`${API_URL}/api/sessions/${sessionId}/submit-score`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            clientId: playerId,
                            email: registrationData.email,
                            nickname: nickname, // Using the nickname they entered when joining
                            realName: registrationData.realName,
                            marketingConsent: registrationData.marketingConsent,
                            deviceFingerprint: deviceFingerprint
                        })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.error || 'Registration failed');
                    }

                    setRegistrationStatus('success');
                    setRegistrationError('');
                } catch (error) {
                    console.error('Registration error:', error);
                    setRegistrationError(error.message || 'Failed to register. Please try again.');
                }
            };

            const handleSkipRegistration = () => {
                setShowRegistration(false);
            };

            if (error) {
                return (
                    <div className="app">
                        <div className="container">
                            <div className="error-message">
                                <h2>Error</h2>
                                <p>{error}</p>
                            </div>
                        </div>
                    </div>
                );
            }

            if (gameState === 'joining') {
                return (
                    <div className="app">
                        <div className="container">
                            <div className="logo">
                                <h1>RSN8TV Trivia</h1>
                                <p>Join the game!</p>
                            </div>
                            <form onSubmit={joinGame} className="join-form">
                                <div className="input-group">
                                    <label htmlFor="nickname">Your Nickname</label>
                                    <input
                                        type="text"
                                        id="nickname"
                                        placeholder="Enter your nickname"
                                        value={nickname}
                                        onChange={(e) => {
                                            setNickname(e.target.value);
                                            setFormError('');
                                        }}
                                        maxLength={20}
                                        autoFocus
                                        disabled={isLoading}
                                        className={formError ? 'input-error' : ''}
                                    />
                                    {formError && (
                                        <div className="error-feedback">
                                            {formError}
                                        </div>
                                    )}
                                </div>
                                <button
                                    type="submit"
                                    className={`btn btn-primary ${isLoading ? 'btn-loading' : ''}`}
                                    disabled={isLoading}
                                >
                                    {isLoading ? '' : 'Join Game'}
                                </button>
                            </form>
                        </div>
                    </div>
                );
            }

            if (gameState === 'waiting') {
                return (
                    <div className="app">
                        <div className="container">
                            <div className="waiting-screen">
                                <h2>Welcome, {nickname}!</h2>
                                <div style={{ marginTop: '2rem' }}>
                                    <p style={{ fontSize: '1.1rem', marginBottom: '1rem' }}>
                                        Is everybody in? Let's go!
                                    </p>
                                    <button
                                        className="btn btn-primary btn-lg"
                                        onClick={startGame}
                                    >
                                        START GAME
                                    </button>
                                    
                                    {/* TEST BUTTON - REMOVE BEFORE PRODUCTION */}
                                    <button
                                        className="btn btn-secondary"
                                        style={{ marginTop: '1rem', display: 'block' }}
                                        onClick={() => window.testRegistration && window.testRegistration()}
                                    >
                                        TEST: Skip to Registration
                                    </button>
                                </div>
                                <div className="score-display">
                                    <h3>Your Score</h3>
                                    <div className="score">{score}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            }

            if (gameState === 'countdown') {
                return (
                    <div className="app">
                        <div className="container">
                            <div className="countdown-screen">
                                <h1 className="countdown-title">GET READY!</h1>
                                <div className="countdown-number">{countdown}</div>
                                <p className="countdown-text">
                                    {countdown > 0 ? 'Game starting...' : 'GO!'}
                                </p>
                            </div>
                        </div>
                    </div>
                );
            }

            if (gameState === 'round_intro' && roundIntro) {
                return (
                    <div className="app">
                        <div className="container" style={{ position: 'relative' }}>
                            <div className="round-intro-countdown">{roundIntroCountdown}</div>
                            <div className="round-intro-screen">
                                <div className="round-number-display">
                                    {roundIntro.round === 4 ? (
                                        <>
                                            <div style={{ lineHeight: '0.85', fontSize: '3rem' }}>SPEED</div>
                                            <div style={{ lineHeight: '0.85', fontSize: '3rem' }}>ROUND</div>
                                        </>
                                    ) : (
                                        <>
                                            <div style={{ lineHeight: '0.85' }}>ROUND</div>
                                            <div style={{ fontSize: '4.5rem', lineHeight: '0.85', marginTop: '0.3rem' }}>{roundIntro.round}</div>
                                        </>
                                    )}
                                </div>
                                <div className="round-difficulty">
                                    {roundIntro.round === 1 && (
                                        <>
                                            EASY DIFFICULTY<br />
                                            <br />
                                            Correct Answers:<br />
                                            25 Points Each
                                        </>
                                    )}
                                    {roundIntro.round === 2 && (
                                        <>
                                            MEDIUM DIFFICULTY<br />
                                            <br />
                                            Correct Answers:<br />
                                            50 Points Each
                                        </>
                                    )}
                                    {roundIntro.round === 3 && (
                                        <>
                                            HARD DIFFICULTY<br />
                                            <br />
                                            Correct Answers:<br />
                                            100 Points Each
                                        </>
                                    )}
                                    {roundIntro.round === 4 && (
                                        <>
                                            <br />
                                            Answer Fast!<br />
                                            50 Points Each
                                        </>
                                    )}
                                </div>
                                <div className="sponsor-section">
                                    <p className="sponsor-label">Brought to you by</p>
                                    <div className="sponsor-logo">{roundIntro.sponsor}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                );
            }

            if (gameState === 'result' && lastResult) {
                return (
                    <div className="app">
                        <div className="container">
                            <div className="result-screen">
                                <div className={lastResult.correct ? 'result-correct' : 'result-incorrect'}>
                                    <div className="result-icon">
                                        {lastResult.correct ? '✅' : '❌'}
                                    </div>
                                    <h2>{lastResult.correct ? 'Correct!' : 'Incorrect'}</h2>

                                    {lastResult.scoring && (
                                        <div className={`scoring-breakdown ${lastResult.correct ? 'correct' : 'incorrect'}`}>
                                            {lastResult.correct ? (
                                                <>
                                                    <div className="scoring-line">
                                                        <span className="scoring-label">Base Points:</span>
                                                        <span className="scoring-value positive">+{lastResult.scoring.basePoints}</span>
                                                    </div>
                                                    {lastResult.scoring.timeBonus > 0 && (
                                                        <div className="scoring-line">
                                                            <span className="scoring-label">Time Bonus ({lastResult.scoring.timeBonusPercentage}%):</span>
                                                            <span className="scoring-value positive">+{lastResult.scoring.timeBonus}</span>
                                                        </div>
                                                    )}
                                                    {lastResult.scoring.streakBonus > 0 && (
                                                        <div className="scoring-line">
                                                            <span className="scoring-label">Streak Bonus:</span>
                                                            <span className="scoring-value positive">+{lastResult.scoring.streakBonus}</span>
                                                        </div>
                                                    )}
                                                    <div className="time-display">
                                                        Answered in {lastResult.scoring.responseTimeSeconds}s / {lastResult.scoring.timeLimitSeconds}s
                                                    </div>
                                                    <div className="scoring-divider"></div>
                                                    <div className="scoring-total">
                                                        <span>Points Earned:</span>
                                                        <span className="scoring-value positive">+{lastResult.pointsEarned}</span>
                                                    </div>
                                                </>
                                            ) : (
                                                <>
                                                    <div className="scoring-line">
                                                        <span className="scoring-label">Penalty:</span>
                                                        <span className="scoring-value negative">{lastResult.scoring?.penaltyPoints || 0}</span>
                                                    </div>
                                                    {lastResult.correctAnswerText && (
                                                        <div style={{ marginTop: '10px', opacity: 0.8 }}>
                                                            The correct answer was: <strong>{lastResult.correctAnswerText}</strong>
                                                        </div>
                                                    )}
                                                </>
                                            )}
                                        </div>
                                    )}

                                    <div className="score-display">
                                        <h3>Total Score</h3>
                                        <div className="score">{lastResult.totalScore || score}</div>
                                    </div>

                                    {lastResult.currentStreak > 1 && (
                                        <div className="streak-indicator">
                                            🔥 {lastResult.currentStreak} in a row!
                                        </div>
                                    )}
                                    {!lastResult.correct && lastResult.currentStreak === 0 && score > 0 && (
                                        <div style={{ marginTop: '10px', opacity: 0.7 }}>
                                            Streak broken 💔
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                );
            }

            if (gameState === 'playing' && currentQuestion) {
                return (
                    <div className="app">
                        <div className="container game-container">
                            <div className="question-header">
                                <div className="round-info">
                                    <span>Round {roundNumber}</span>
                                    <span>Q{questionNumber}/10</span>
                                    <span>Score: {score}</span>
                                </div>
                                <div className={`timer ${timeRemaining <= 5 ? 'warning' : ''}`}>
                                    {timeRemaining}
                                </div>
                            </div>

                            <div className="question-text">
                                {currentQuestion.text}
                            </div>

                            {answerStatus && (
                                <div className="answer-status">
                                    <p className="status-title">✓ Answer locked-in!</p>
                                    <p className="can-change">Hang tight until they answer or time runs out!</p>
                                </div>
                            )}

                            <div className="answers-grid">
                                {currentQuestion.options.map((option, index) => (
                                    <button
                                        key={index}
                                        className={`answer-btn ${
                                            selectedAnswer === index ? 'selected' : ''
                                        } ${
                                            showResult && selectedAnswer === index ? (isCorrect ? 'correct' : 'incorrect') : ''
                                        } ${
                                            fadedAnswers.includes(index) ? 'faded' : ''
                                        } ${
                                            !canChangeAnswer ? 'locked' : ''
                                        }`}
                                        onClick={() => submitAnswer(index)}
                                        disabled={!canChangeAnswer || fadedAnswers.includes(index)}
                                    >
                                        {String.fromCharCode(65 + index)}. {option}
                                    </button>
                                ))}
                            </div>

                            {streak >= 3 && (
                                <div className="streak-indicator" style={{ marginTop: '15px' }}>
                                    🔥 {streak} streak! Keep going!
                                </div>
                            )}
                        </div>
                    </div>
                );
            }

            if (gameState === 'lightning' && currentQuestion) {
                return (
                    <div className="app lightning-round">
                        <div className="container game-container">
                            <div className="lightning-header">
                                <div className="lightning-timer">
                                    {lightningTimeRemaining}s
                                </div>
                                <div className="lightning-score">
                                    Score: {score} | Q{questionNumber}
                                </div>
                            </div>

                            <div className="question-text">
                                {currentQuestion.text}
                            </div>

                            <div className="answers-grid">
                                {currentQuestion.options.map((option, index) => (
                                    <button
                                        key={index}
                                        className={`answer-btn ${
                                            selectedAnswer === index ? 'selected' : ''
                                        } ${
                                            hasAnswered && selectedAnswer === index ? 'lightning-answered' : ''
                                        }`}
                                        onClick={() => submitAnswer(index)}
                                        disabled={hasAnswered || isFrozen}
                                    >
                                        {String.fromCharCode(65 + index)}. {option}
                                    </button>
                                ))}
                            </div>

                            {streak >= 3 && (
                                <div className="streak-indicator" style={{ marginTop: '15px' }}>
                                    🔥 {streak} streak!
                                </div>
                            )}
                        </div>

                        {isFrozen && (
                            <div className="frozen-overlay">
                                <div className="frozen-content">
                                    <div className="frozen-icon">❄️</div>
                                    <div className="frozen-text">FROZEN</div>
                                    <div className="frozen-timer">{frozenTimer}</div>
                                </div>
                            </div>
                        )}
                    </div>
                );
            }

            if (gameState === 'finished') {
                const playerData = finalLeaderboard.find(p => p.clientId === playerId);

                return (
                    <div className="app">
                        <div className="container">
                            <div className="result-screen">
                                <h1>🎉 Game Complete! 🎉</h1>
                                <div className="score-display">
                                    <h3>Your Final Score</h3>
                                    <div className="score">{playerData?.totalScore || score}</div>
                                    {playerData && (
                                        <>
                                            <p style={{ fontSize: '0.9em' }}>Accuracy: {playerData.accuracy.toFixed(1)}%</p>
                                            <p style={{ fontSize: '0.9em' }}>Longest Streak: {playerData.longestStreak}</p>
                                            {playerData.perfectRounds?.length > 0 && (
                                                <div className="perfect-round-indicator">
                                                    Perfect Rounds: {playerData.perfectRounds.join(', ')}
                                                </div>
                                            )}
                                        </>
                                    )}
                                </div>

                                <div className="leaderboard">
                                    <h3>Final Rankings</h3>
                                    {finalLeaderboard.map((player, index) => (
                                        <div
                                            key={index}
                                            className={`leaderboard-item ${
                                                player.clientId === playerId ? 'highlight' : ''
                                            }`}
                                        >
                                            <span className="rank">
                                                {index === 0 ? '🏆' : `#${index + 1}`}
                                            </span>
                                            <span className="player-name">
                                                {player.nickname || `Player ${index + 1}`}
                                                {player.clientId === playerId && ' (You)'}
                                            </span>
                                            <span className="player-score">{player.totalScore}</span>
                                        </div>
                                    ))}
                                </div>

                                <div className="play-again-message">
                                    <button 
                                        className="btn btn-primary btn-lg"
                                        onClick={startNewGame}
                                    >
                                        START NEW GAME
                                    </button>
                                </div>
                            </div>
                        </div>

                        {/* Registration Modal - rendered as overlay */}
                        {showRegistration && (
                            <div className="registration-modal-overlay">
                                <div className="registration-modal">
                                    <h2><span className="trophy-emoji">🏆</span> Register for Prizes! <span className="trophy-emoji">🏆</span></h2>

                                    {registrationStatus === 'success' ? (
                                        <div className="registration-success">
                                            <div className="success-icon">✅</div>
                                            <h3>Registration Successful!</h3>
                                            <p>You're now eligible for weekly, monthly, and quarterly prizes!</p>
                                            <p>Score: {score} points</p>
                                            <button
                                                className="btn btn-primary"
                                                onClick={() => setShowRegistration(false)}
                                            >
                                                Close
                                            </button>
                                        </div>
                                    ) : (
                                        <>
                                            <p>Enter your information to be eligible for prizes!</p>

                                            <form onSubmit={(e) => { e.preventDefault(); handleRegistrationSubmit(); }}>
                                                <div className="input-group">
                                                    <label htmlFor="realName">Full Name</label>
                                                    <input
                                                        type="text"
                                                        id="realName"
                                                        value={registrationData.realName}
                                                        onChange={(e) => setRegistrationData({
                                                            ...registrationData,
                                                            realName: e.target.value
                                                        })}
                                                        required
                                                    />
                                                </div>

                                                <div className="input-group">
                                                    <label htmlFor="email">Email Address</label>
                                                    <input
                                                        type="email"
                                                        id="email"
                                                        value={registrationData.email}
                                                        onChange={(e) => setRegistrationData({
                                                            ...registrationData,
                                                            email: e.target.value
                                                        })}
                                                        required
                                                    />
                                                </div>

                                                <div className="checkbox-group">
                                                    <label>
                                                        <input
                                                            type="checkbox"
                                                            checked={registrationData.marketingConsent}
                                                            onChange={(e) => setRegistrationData({
                                                                ...registrationData,
                                                                marketingConsent: e.target.checked
                                                            })}
                                                        />
                                                        <span>I agree to receive promotional emails and prize notifications</span>
                                                    </label>
                                                </div>

                                                {registrationError && (
                                                    <div className="error-feedback">
                                                        {registrationError}
                                                    </div>
                                                )}

                                                <div className="button-group">
                                                    <button type="submit" className="btn btn-primary">
                                                        Register & Save Score
                                                    </button>
                                                    <button
                                                        type="button"
                                                        className="btn btn-secondary"
                                                        onClick={handleSkipRegistration}
                                                    >
                                                        Skip Registration
                                                    </button>
                                                </div>
                                            </form>

                                            <p className="registration-note">
                                                Note: You must register to be eligible for prizes.
                                                Prizes are awarded weekly, monthly, and quarterly based on leaderboard standings.
                                            </p>
                                        </>
                                    )}
                                </div>
                            </div>
                        )}
                    </div>
                );
            }

            {showStreakBonus && (
                <div className="streak-bonus-popup">
                    {showStreakBonus}
                </div>
            )}

            return null;
        }

        // Render the app
        ReactDOM.render(<TriviaApp />, document.getElementById('root'));
    </script>
</body>
</html>
