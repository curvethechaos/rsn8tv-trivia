const express = require('express');
const router = express.Router();
const exportService = require('../services/exportService');
const authMiddleware = require('../middleware/authMiddleware');
const logger = require('../utils/logger');

// Apply admin authentication to all routes
router.use(authMiddleware.verifyToken.bind(authMiddleware));

/**
 * POST /api/admin/exports
 * Create a new export
 */
router.post('/', async (req, res) => {
  try {
    const { type, filters = {} } = req.body;
    const userId = req.user.id;
    
    if (!type) {
      return res.status(400).json({ error: 'Export type is required' });
    }
    
    const validTypes = ['players', 'leaderboards', 'questions', 'marketing_list', 'prize_winners'];
    if (!validTypes.includes(type)) {
      return res.status(400).json({ error: 'Invalid export type' });
    }
    
    const exportId = await exportService.createExport(type, filters, userId);
    
    res.json({
      success: true,
      exportId,
      message: 'Export initiated successfully'
    });
  } catch (error) {
    logger.error('Export creation failed:', error);
    res.status(500).json({ error: 'Failed to create export' });
  }
});

/**
 * GET /api/admin/exports
 * List user's exports
 */
router.get('/', async (req, res) => {
  try {
    const userId = req.user.id;
    const limit = parseInt(req.query.limit) || 50;
    
    const exports = await exportService.listExports(userId, limit);
    
    res.json({
      success: true,
      exports
    });
  } catch (error) {
    logger.error('Failed to list exports:', error);
    res.status(500).json({ error: 'Failed to list exports' });
  }
});

/**
 * GET /api/admin/exports/:id
 * Get export status
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const exportData = await exportService.getExportStatus(id);
    
    if (!exportData) {
      return res.status(404).json({ error: 'Export not found' });
    }
    
    res.json({
      success: true,
      export: exportData
    });
  } catch (error) {
    logger.error('Failed to get export status:', error);
    res.status(500).json({ error: 'Failed to get export status' });
  }
});

/**
 * GET /api/admin/exports/:id/download
 * Download an export
 */
router.get('/:id/download', async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    const downloadUrl = await exportService.getDownloadUrl(id, userId);
    
    if (!downloadUrl) {
      return res.status(404).json({ error: 'Export not found or not ready' });
    }
    
    res.json({
      success: true,
      downloadUrl
    });
  } catch (error) {
    logger.error('Failed to generate download URL:', error);
    res.status(500).json({ error: 'Failed to generate download URL' });
  }
});

/**
 * DELETE /api/admin/exports/:id
 * Delete an export
 */
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    
    await exportService.deleteExport(id, userId);
    
    res.json({
      success: true,
      message: 'Export deleted successfully'
    });
  } catch (error) {
    logger.error('Failed to delete export:', error);
    res.status(500).json({ error: 'Failed to delete export' });
  }
});

/**
 * POST /api/admin/exports/estimate
 * Estimate row count for an export
 */
router.post('/estimate', async (req, res) => {
  try {
    const { type, filters = {} } = req.body;
    
    if (!type) {
      return res.status(400).json({ error: 'Export type is required' });
    }
    
    const count = await exportService.estimateRowCount(type, filters);
    
    res.json({
      success: true,
      estimatedRows: count,
      processTime: count < 1000 ? 'immediate' : 'queued'
    });
  } catch (error) {
    logger.error('Failed to estimate export size:', error);
    res.status(500).json({ error: 'Failed to estimate export size' });
  }
});

module.exports = router;
