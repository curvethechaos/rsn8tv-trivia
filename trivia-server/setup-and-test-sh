#!/bin/bash
# setup-and-test.sh - Setup and test the trivia system

echo "🚀 RSN8TV Trivia System - Setup and Test Script"
echo "=============================================="

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Base directory
BASE_DIR="/home/ubuntu/rsn8tv-trivia/trivia-server"
cd $BASE_DIR

# Function to check if a command succeeded
check_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ $1${NC}"
    else
        echo -e "${RED}✗ $1${NC}"
        exit 1
    fi
}

# 1. Create necessary directories
echo -e "\n${YELLOW}1. Creating directories...${NC}"
mkdir -p services
mkdir -p data
mkdir -p middleware
mkdir -p test
check_status "Directories created"

# 2. Create the trivia API service
echo -e "\n${YELLOW}2. Creating Trivia API Service...${NC}"
cat > services/triviaAPIService.js << 'EOF'
// Paste the triviaAPIService.js content here
// (Due to size, you'll need to copy the content from the artifact above)
EOF
echo -e "${GREEN}✓ Created services/triviaAPIService.js${NC}"
echo -e "${YELLOW}   NOTE: Please copy the full triviaAPIService.js content from the artifact${NC}"

# 3. Create fallback questions
echo -e "\n${YELLOW}3. Creating fallback questions...${NC}"
cat > data/fallbackQuestions.json << 'EOF'
// Paste the fallbackQuestions.json content here
// (Due to size, you'll need to copy the content from the artifact above)
EOF
echo -e "${GREEN}✓ Created data/fallbackQuestions.json${NC}"
echo -e "${YELLOW}   NOTE: Please copy the full fallbackQuestions.json content from the artifact${NC}"

# 4. Install additional dependencies if needed
echo -e "\n${YELLOW}4. Checking dependencies...${NC}"
npm list axios &>/dev/null || npm install axios
check_status "Dependencies installed"

# 5. Update environment variables
echo -e "\n${YELLOW}5. Checking environment variables...${NC}"
if ! grep -q "PROFANITY_API_KEY" .env; then
    echo "PROFANITY_API_KEY=your_key_here" >> .env
    echo -e "${YELLOW}   Added PROFANITY_API_KEY to .env (please update with actual key)${NC}"
fi

if ! grep -q "BASE_URL" .env; then
    echo "BASE_URL=https://trivia.rsn8tv.com" >> .env
    echo -e "${GREEN}✓ Added BASE_URL to .env${NC}"
fi

# 6. Create a test script
echo -e "\n${YELLOW}6. Creating test script...${NC}"
cat > test/api-test.sh << 'EOF'
#!/bin/bash
# API Test Script

BASE_URL="http://localhost:3000"
echo "Testing RSN8TV Trivia API..."

# Test 1: Create Session
echo -e "\n1. Creating a new session..."
RESPONSE=$(curl -s -X POST $BASE_URL/api/sessions/create \
  -H "Content-Type: application/json" \
  -d '{"hostId": "test-host-001"}')

SESSION_ID=$(echo $RESPONSE | grep -o '"sessionId":"[^"]*' | grep -o '[^"]*$')
echo "Session ID: $SESSION_ID"

# Test 2: Get Session Details
echo -e "\n2. Getting session details..."
curl -s $BASE_URL/api/sessions/$SESSION_ID | jq '.'

# Test 3: Get Questions
echo -e "\n3. Getting questions..."
curl -s $BASE_URL/api/sessions/$SESSION_ID/questions | jq '.questions[0]'

# Test 4: Join Session
echo -e "\n4. Joining session..."
curl -s -X POST $BASE_URL/api/sessions/$SESSION_ID/join \
  -H "Content-Type: application/json" \
  -d '{"playerId": "player-001", "nickname": "TestPlayer"}' | jq '.'

# Test 5: Get Leaderboards
echo -e "\n5. Getting leaderboards..."
curl -s $BASE_URL/api/leaderboards?period=weekly | jq '.'

echo -e "\n✅ API tests complete!"
EOF

chmod +x test/api-test.sh
check_status "Test script created"

# 7. Create WebSocket test
echo -e "\n${YELLOW}7. Creating WebSocket test...${NC}"
cat > test/websocket-test.js << 'EOF'
const io = require('socket.io-client');

const socket = io('http://localhost:3000');
const sessionId = process.argv[2];

if (!sessionId) {
  console.error('Usage: node websocket-test.js <sessionId>');
  process.exit(1);
}

console.log('Connecting to WebSocket server...');

socket.on('connect', () => {
  console.log('✓ Connected:', socket.id);
  
  // Join as player
  socket.emit('PLAYER_JOIN', { 
    sessionId: sessionId,
    playerId: 'test-player-' + Date.now(),
    nickname: 'TestPlayer'
  });
});

socket.on('PLAYER_JOINED', (data) => {
  console.log('✓ Joined session:', data);
});

socket.on('QUESTION_UPDATE', (data) => {
  console.log('\n📋 New Question:', data.question.text);
  console.log('Answers:', data.question.answers);
  
  // Auto-submit first answer after 2 seconds
  setTimeout(() => {
    socket.emit('SUBMIT_ANSWER', {
      sessionId: sessionId,
      answer: data.question.answers[0]
    });
    console.log('→ Submitted answer:', data.question.answers[0]);
  }, 2000);
});

socket.on('ANSWER_RESULT', (data) => {
  console.log('\n📊 Result:', data.correct ? '✓ Correct!' : '✗ Wrong');
  console.log('Score:', data.score, 'Total:', data.totalScore);
});

socket.on('GAME_COMPLETE', (data) => {
  console.log('\n🏁 Game Complete!');
  console.log('Final Scores:', data.finalScores);
  process.exit(0);
});

socket.on('ERROR', (error) => {
  console.error('❌ Error:', error);
});

socket.on('disconnect', () => {
  console.log('Disconnected from server');
});
EOF
check_status "WebSocket test created"

# 8. Start the server
echo -e "\n${YELLOW}8. Server Status${NC}"
if pgrep -f "node.*server.js" > /dev/null; then
    echo -e "${GREEN}✓ Server is already running${NC}"
else
    echo -e "${YELLOW}Starting server...${NC}"
    npm run dev &
    sleep 3
    if pgrep -f "node.*server.js" > /dev/null; then
        echo -e "${GREEN}✓ Server started successfully${NC}"
    else
        echo -e "${RED}✗ Failed to start server${NC}"
    fi
fi

# 9. Run basic health check
echo -e "\n${YELLOW}9. Running health check...${NC}"
HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/sessions/health || echo "000")
if [ "$HEALTH_CHECK" == "404" ] || [ "$HEALTH_CHECK" == "200" ]; then
    echo -e "${GREEN}✓ Server is responding to requests${NC}"
else
    echo -e "${RED}✗ Server is not responding (HTTP $HEALTH_CHECK)${NC}"
fi

# 10. Show next steps
echo -e "\n${YELLOW}=== Setup Complete! ===${NC}"
echo -e "\n${GREEN}Next steps:${NC}"
echo "1. Copy the full content from the artifacts to:"
echo "   - services/triviaAPIService.js"
echo "   - data/fallbackQuestions.json"
echo "   - routes/sessionRoutes.js (update existing)"
echo ""
echo "2. Update .env file with:"
echo "   - PROFANITY_API_KEY (get from profanity.dev)"
echo "   - ADMIN_TOKEN (generate a secure token)"
echo ""
echo "3. Run tests:"
echo "   - API Tests: ./test/api-test.sh"
echo "   - WebSocket: node test/websocket-test.js <sessionId>"
echo ""
echo "4. Monitor logs:"
echo "   - tail -f logs/app.log"
echo "   - tail -f logs/error.log"
echo ""
echo -e "${GREEN}Happy coding! 🎮${NC}"
