<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RSN8TV Trivia - Host Display</title>
    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1a1c3d 0%, #2d3561 100%);
            color: white;
            height: 100vh;
            overflow: hidden;
        }

        .host-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        /* Header */
        .header {
            background-color: #;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid rgba(255, 255, 255, 0.1);
        }

        .title {
            font-size: 2.5rem;
            font-weight: bold;
            color: #4dd0e1;
            text-shadow: 0 0 20px rgba(77, 208, 225, 0.5);
        }

        .room-info {
            text-align: right;
        }

        .room-label {
            font-size: 1.5rem;
            color: #ffb84d;
            margin-bottom: 5px;
        }

        .room-code {
            font-size: 3rem;
            font-weight: bold;
            color: #ffffff;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.5);
            letter-spacing: 0.2em;
        }

        .player-count {
            font-size: 1.2rem;
            color: #4dd0e1;
            margin-top: 10px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            padding: 40px;
            gap: 40px;
            background-color: #232323;
        }

        /* QR Code Section */
        .qr-section {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 20px;
            padding: 40px;
        }

        .qr-title {
            font-size: 2rem;
            margin-bottom: 30px;
            color: #ffffff;
        }

        #qrcode {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
        }

        #qrcode img {
            width: 256px;
            height: 256px;
        }

        .join-url {
            margin-top: 20px;
            font-size: 1.2rem;
            color: #4dd0e1;
            text-align: center;
            word-break: break-all;
        }

        .start-button {
            margin-top: 30px;
            padding: 20px 60px;
            font-size: 1.5rem;
            font-weight: bold;
            background: linear-gradient(45deg, #4dd0e1, #1a9ba5);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 20px rgba(77, 208, 225, 0.3);
            display: none;
        }

        .start-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 30px rgba(77, 208, 225, 0.4);
        }

        .start-button:disabled {
            background: #555;
            cursor: not-allowed;
            opacity: 0.6;
        }

        /* Players Section */
        .players-section {
            flex: 1;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 20px;
            padding: 40px;
            overflow: hidden;
        }

        .players-title {
            font-size: 2rem;
            margin-bottom: 30px;
            color: #ffffff;
        }

        .players-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            max-height: calc(100% - 80px);
            overflow-y: auto;
        }

        .player-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            animation: slideIn 0.3s ease;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .player-card.answered {
            border-color: #4dd0e1;
            background: rgba(77, 208, 225, 0.1);
        }

        .player-nickname {
            font-size: 1.4rem;
            font-weight: bold;
            margin-bottom: 10px;
            color: #ffffff;
        }

        .player-score {
            font-size: 1.2rem;
            color: #4dd0e1;
        }

        .player-streak {
            font-size: 0.9rem;
            color: #ffb84d;
            margin-top: 5px;
        }

        /* Game View */
        .game-view {
            display: none;
            flex-direction: column;
            height: 100%;
            padding: 40px;
            gap: 30px;
            background-color: #232323;
        }

        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 15px;
        }

        .question-info {
            font-size: 1.5rem;
            color: #ffb84d;
        }

        .timer-display {
            font-size: 3rem;
            font-weight: bold;
            color: #4dd0e1;
            text-shadow: 0 0 20px rgba(77, 208, 225, 0.5);
        }

        .timer-display.warning {
            color: #ff9800;
        }

        .timer-display.danger {
            color: #f44336;
            animation: pulse 1s infinite;
        }

        .question-section {
            flex: 1;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 20px;
            padding: 40px;
            display: flex;
            flex-direction: column;
            gap: 30px;
        }

        .question-text {
            font-size: 2.5rem;
            text-align: center;
            color: #ffffff;
            line-height: 1.4;
        }

        .answers-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-top: auto;
        }

        .answer-option {
            padding: 30px;
            background: rgba(255, 255, 255, 0.1);
            border: 3px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            font-size: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
        }

        .answer-option.faded {
            opacity: 0.3;
            border-color: rgba(255, 255, 255, 0.1);
        }

        .answer-option.correct {
            background: rgba(76, 175, 80, 0.3);
            border-color: #4CAF50;
            color: #4CAF50;
        }

        .answer-option.incorrect {
            background: rgba(244, 67, 54, 0.3);
            border-color: #f44336;
            color: #f44336;
        }

        .scoreboard-section {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 20px;
            padding: 30px;
        }

        .scoreboard-title {
            font-size: 1.8rem;
            margin-bottom: 20px;
            color: #ffb84d;
        }

        .scoreboard-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .scoreboard-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .scoreboard-item.answered {
            border-color: #4dd0e1;
        }

        .scoreboard-rank {
            font-size: 1.2rem;
            font-weight: bold;
            color: #4dd0e1;
            margin-right: 15px;
        }

        .scoreboard-player {
            flex: 1;
            font-size: 1.3rem;
            color: #ffffff;
        }

        .scoreboard-score {
            font-size: 1.4rem;
            font-weight: bold;
            color: #ffb84d;
        }

        /* Countdown Overlay */
        .countdown-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .countdown-number {
            font-size: 10rem;
            font-weight: bold;
            color: #4dd0e1;
            text-shadow: 0 0 50px rgba(77, 208, 225, 0.8);
            animation: countdownPulse 1s ease;
        }

        @keyframes countdownPulse {
            0% { transform: scale(0); opacity: 0; }
            50% { transform: scale(1.2); opacity: 1; }
            100% { transform: scale(1); opacity: 1; }
        }

        /* Loading State */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1a1c3d 0%, #2d3561 100%);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #4dd0e1;
            width: 60px;
            height: 60px;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* Error State */
        .error-message {
            background: #f44336;
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px;
        }

        .retry-button {
            margin-top: 20px;
            padding: 15px 30px;
            font-size: 1.2rem;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
    <!-- Loading State -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
        <div style="font-size: 1.5rem; color: #4dd0e1;">Creating game session...</div>
    </div>

    <!-- Countdown Overlay -->
    <div class="countdown-overlay" id="countdownOverlay">
        <div class="countdown-number" id="countdownNumber"></div>
    </div>

    <!-- Main Container -->
    <div class="host-container hidden" id="mainContainer">
        <div class="header">
            <div class="title"><h2>RSN8TV Trivia</h2></div>
            <div class="room-info">
                <div class="room-label">Room:</div>
                <div class="room-code" id="roomCode">-</div>
                <div class="player-count"><span id="playerCount">0</span> Players Joined</div>
            </div>
        </div>

        <!-- Pre-Game View -->
        <div class="main-content" id="preGameView">
            <div class="qr-section">
                <h2 class="qr-title">Players Scan to Join!</h2>
                <div id="qrcode"></div>
                <div class="join-url" id="joinUrl"></div>
                <button class="start-button" id="startButton" onclick="startGame()">START GAME</button>
            </div>

            <div class="players-section">
                <h2 class="players-title">Players (<span id="playerListCount">0</span>)</h2>
                <div class="players-grid" id="playersGrid"></div>
            </div>
        </div>

        <!-- Game View -->
        <div class="game-view" id="gameView">
            <div class="game-header">
                <div class="question-info">
                    Question <span id="currentQuestion">1</span> of <span id="totalQuestions">10</span>
                </div>
                <div class="timer-display" id="timerDisplay">18</div>
            </div>

            <div class="question-section">
                <div class="question-text" id="questionText">Loading question...</div>
                <div class="answers-grid" id="answersGrid">
                    <div class="answer-option" data-index="0"></div>
                    <div class="answer-option" data-index="1"></div>
                    <div class="answer-option" data-index="2"></div>
                    <div class="answer-option" data-index="3"></div>
                </div>
            </div>

            <div class="scoreboard-section">
                <h3 class="scoreboard-title">Live Scores</h3>
                <div class="scoreboard-list" id="scoreboardList"></div>
            </div>
        </div>
    </div>

    <!-- Error State -->
    <div class="loading-overlay hidden" id="errorOverlay">
        <div class="error-message" id="errorMessage">Failed to create session</div>
        <button class="retry-button" onclick="location.reload()">Retry</button>
    </div>

    <script>
        console.log('RSN8TV Host Display starting...');

        let socket = null;
        let sessionId = null;
        let roomCode = null;
        let gameState = {
            players: {},
            playerCount: 0,
            currentQuestion: null,
            timer: null
        };

        // Create session on page load
        fetch('https://trivia.rsn8tv.com/api/sessions/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ hostId: 'host-' + Date.now() })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Session created:', data);

            if (data.success) {
                sessionId = data.sessionId;
                roomCode = data.roomCode;

                // Update UI with session info
                document.getElementById('roomCode').textContent = roomCode;
                document.getElementById('joinUrl').textContent = data.joinUrl;

                // Display QR code (base64 image)
                const qrContainer = document.getElementById('qrcode');
                const img = document.createElement('img');
                img.src = data.qrCode; // This is the base64 data URL
                qrContainer.appendChild(img);

                // Show main content
                document.getElementById('loadingOverlay').classList.add('hidden');
                document.getElementById('mainContainer').classList.remove('hidden');

                // Connect WebSocket
                connectSocket();
            } else {
                throw new Error(data.error || 'Failed to create session');
            }
        })
        .catch(error => {
            console.error('Error creating session:', error);
            document.getElementById('loadingOverlay').classList.add('hidden');
            document.getElementById('errorOverlay').classList.remove('hidden');
            document.getElementById('errorMessage').textContent = error.message;
        });

        function connectSocket() {
            console.log('Connecting WebSocket for session:', sessionId);

            // Connect to WebSocket server with auth
            socket = io('https://trivia.rsn8tv.com', {
                transports: ['websocket', 'polling'],
                auth: {
                    sessionId: sessionId,
                    role: 'host',
                    clientId: 'host-' + sessionId
                }
            });

            socket.on('connect', () => {
                console.log('Socket connected, joining as host');
                // Still emit HOST_JOIN because hostHandler expects it
                socket.emit('HOST_JOIN', { sessionId: sessionId });
            });

            socket.on('CONNECTED', (data) => {
                console.log('Connection confirmed:', data);
            });

            // Player management events
            socket.on('PLAYER_JOINED', (data) => {
                console.log('Player joined:', data);
                // The PLAYER_UPDATE event will handle the actual display update
            });

            socket.on('PLAYER_LEFT', (data) => {
                console.log('Player left:', data);
                handlePlayerUpdate(data);
            });

            socket.on('PLAYER_UPDATE', (data) => {
                console.log('Player update:', data);
                handlePlayerUpdate(data);
            });

            // Game events
            socket.on('COUNTDOWN', (data) => {
                console.log('Countdown:', data);
                showCountdown(data.count);
            });

            socket.on('GAME_STARTED', () => {
                console.log('Game started!');
                document.getElementById('startButton').textContent = 'GAME IN PROGRESS';
                document.getElementById('startButton').disabled = true;
            });

            socket.on('QUESTION_READY', (data) => {
                console.log('Question ready:', data);
                showQuestion(data);
            });

            socket.on('GAME_STATE_UPDATE', (data) => {
                console.log('Game state update:', data);
                updateGameState(data);
            });

            socket.on('FADE_ANSWERS', (data) => {
                console.log('Fade answers:', data);
                fadeAnswers(data.fadeIndices);
            });

            socket.on('TIME_UP', (data) => {
                console.log('Time up:', data);
                showCorrectAnswer(data.correctAnswer);
            });

            socket.on('QUESTION_COMPLETE', (data) => {
                console.log('Question complete:', data);
                showCorrectAnswer(data.correctAnswerIndex);
            });

            socket.on('GAME_COMPLETE', (data) => {
                console.log('Game complete:', data);
                showFinalScores(data.finalScores);
            });

            socket.on('disconnect', () => {
                console.log('Socket disconnected');
            });

            socket.on('error', (error) => {
                console.error('Socket error:', error);
            });
        }

        function handlePlayerUpdate(data) {
            // Update player count and list
            if (data.playerCount !== undefined) {
                gameState.playerCount = data.playerCount;
            }
            
            if (data.players) {
                gameState.players = data.players.reduce((acc, player) => {
                    acc[player.clientId] = player;
                    return acc;
                }, {});
                gameState.playerCount = data.players.length;
            }

            updatePlayerDisplay();

            // Show start button if we have players
            if (gameState.playerCount > 0) {
                document.getElementById('startButton').style.display = 'block';
            } else {
                document.getElementById('startButton').style.display = 'none';
            }
        }

        function updatePlayerDisplay() {
            document.getElementById('playerCount').textContent = gameState.playerCount;
            document.getElementById('playerListCount').textContent = gameState.playerCount;

            const playersGrid = document.getElementById('playersGrid');
            playersGrid.innerHTML = '';

            // Display players in waiting room
            Object.values(gameState.players).forEach(player => {
                const card = document.createElement('div');
                card.className = 'player-card';
                card.innerHTML = `
                    <div class="player-nickname">${player.nickname || 'Player'}</div>
                    <div class="player-score">Ready to play!</div>
                `;
                playersGrid.appendChild(card);
            });
        }

        function showCountdown(count) {
            const overlay = document.getElementById('countdownOverlay');
            const number = document.getElementById('countdownNumber');
            
            if (count > 0) {
                overlay.style.display = 'flex';
                number.textContent = count;
                number.style.animation = 'none';
                setTimeout(() => {
                    number.style.animation = 'countdownPulse 1s ease';
                }, 10);
            } else {
                overlay.style.display = 'none';
                // Show game view
                document.getElementById('preGameView').style.display = 'none';
                document.getElementById('gameView').style.display = 'flex';
            }
        }

        function showQuestion(data) {
            // Update question info
            document.getElementById('currentQuestion').textContent = data.questionNumber || 1;
            document.getElementById('totalQuestions').textContent = data.totalQuestions || 10;
            
            // Update question text
            document.getElementById('questionText').textContent = data.question;
            
            // Update answers
            const answersGrid = document.getElementById('answersGrid');
            const answerElements = answersGrid.querySelectorAll('.answer-option');
            
            data.answers.forEach((answer, index) => {
                if (answerElements[index]) {
                    answerElements[index].textContent = answer;
                    answerElements[index].classList.remove('faded', 'correct', 'incorrect');
                }
            });
            
            // Start timer
            startTimer(data.timeLimit || 18);
        }

        function startTimer(seconds) {
            clearInterval(gameState.timer);
            let timeLeft = seconds;
            const timerDisplay = document.getElementById('timerDisplay');
            
            const updateTimer = () => {
                timerDisplay.textContent = timeLeft;
                
                // Change color based on time left
                timerDisplay.classList.remove('warning', 'danger');
                if (timeLeft <= 5) {
                    timerDisplay.classList.add('danger');
                } else if (timeLeft <= 10) {
                    timerDisplay.classList.add('warning');
                }
                
                if (timeLeft <= 0) {
                    clearInterval(gameState.timer);
                }
                
                timeLeft--;
            };
            
            updateTimer();
            gameState.timer = setInterval(updateTimer, 1000);
        }

        function updateGameState(data) {
            // Update scoreboard
            const scoreboardList = document.getElementById('scoreboardList');
            scoreboardList.innerHTML = '';
            
            // Sort players by score
            const sortedPlayers = data.playerScores.sort((a, b) => b.score - a.score);
            
            sortedPlayers.forEach((player, index) => {
                const item = document.createElement('div');
                item.className = 'scoreboard-item' + (player.hasAnswered ? ' answered' : '');
                item.innerHTML = `
                    <span class="scoreboard-rank">#${index + 1}</span>
                    <span class="scoreboard-player">${player.nickname}</span>
                    <span class="scoreboard-score">${player.score} pts</span>
                `;
                
                if (player.streak > 2) {
                    item.innerHTML += `<span class="player-streak">🔥 ${player.streak}</span>`;
                }
                
                scoreboardList.appendChild(item);
            });
        }

        function fadeAnswers(fadeIndices) {
            const answerElements = document.querySelectorAll('.answer-option');
            fadeIndices.forEach(index => {
                if (answerElements[index]) {
                    answerElements[index].classList.add('faded');
                }
            });
        }

        function showCorrectAnswer(correctIndex) {
            const answerElements = document.querySelectorAll('.answer-option');
            answerElements.forEach((element, index) => {
                if (index === correctIndex) {
                    element.classList.add('correct');
                } else if (!element.classList.contains('faded')) {
                    element.classList.add('incorrect');
                }
            });
        }

        function showFinalScores(finalScores) {
            // Show final scores with play again button
            const gameView = document.getElementById('gameView');
            gameView.innerHTML = `
                <div class="final-scores-container">
                    <h1 style="color: #4dd0e1; text-align: center; margin-bottom: 30px;">🎉 Game Complete! 🎉</h1>
                    
                    <div class="play-again-section" style="text-align: center; margin-bottom: 30px;">
                        <button onclick="playAgain()" style="
                            padding: 20px 60px;
                            font-size: 1.5rem;
                            background: linear-gradient(45deg, #4dd0e1, #1a9ba5);
                            color: white;
                            border: none;
                            border-radius: 10px;
                            cursor: pointer;
                            box-shadow: 0 5px 20px rgba(77, 208, 225, 0.3);
                        ">
                            🔄 Play Again with Same Players
                        </button>
                    </div>
                    
                    <div class="final-leaderboard" style="
                        background: rgba(0, 0, 0, 0.3);
                        border-radius: 20px;
                        padding: 40px;
                        max-width: 800px;
                        margin: 0 auto;
                    ">
                        ${finalScores.map((player, index) => `
                            <div style="
                                display: flex;
                                justify-content: space-between;
                                align-items: center;
                                padding: 20px;
                                margin-bottom: 15px;
                                background: rgba(255, 255, 255, 0.05);
                                border-radius: 10px;
                                font-size: ${index === 0 ? '1.8rem' : '1.3rem'};
                                ${index === 0 ? 'border: 2px solid #ffd700;' : ''}
                            ">
                                <span style="color: #4dd0e1; font-weight: bold;">
                                    ${index === 0 ? '🏆' : '#' + (index + 1)}
                                </span>
                                <span style="flex: 1; margin-left: 20px; color: white;">
                                    ${player.nickname}
                                </span>
                                <span style="color: #ffb84d; font-weight: bold;">
                                    ${player.totalScore} pts
                                </span>
                                <span style="color: #4dd0e1; margin-left: 20px;">
                                    ${player.accuracy.toFixed(0)}% correct
                                </span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }
        
        function playAgain() {
            console.log('Host requesting play again');
            socket.emit('host:play_again');
        }
        
        // Handle play again response
        socket.on('PLAY_AGAIN', (data) => {
            console.log('Play again event:', data);
            
            // Update session info
            sessionId = data.newSessionId;
            roomCode = data.roomCode;
            
            // Update room code display
            document.getElementById('roomCode').textContent = roomCode;
            
            // Reset to pre-game view
            document.getElementById('gameView').style.display = 'none';
            document.getElementById('preGameView').style.display = 'flex';
            
            // Reset start button
            const startButton = document.getElementById('startButton');
            startButton.textContent = 'START GAME';
            startButton.disabled = false;
            
            // Players are already connected, just show them
            updatePlayerDisplay();
        });

        function startGame() {
            console.log('Starting game...');
            // Changed to emit the correct event name
            socket.emit('host:start_game', { sessionId: sessionId });
        }
    </script>
</body>
</html>
